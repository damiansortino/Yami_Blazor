@page "/login"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject ILoginService loginService
@inject IJSRuntime js

@using LaymarClientSide.Shared.Entidades
@using LaymarClientSide.Client.Auth
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<style type="text/css">
    :root {
        --baseColor: #606468;
    }

    /* helpers/align.css */

    .align {
        align-items: center;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    /* helpers/grid.css */

    :root {
        --gridMaxWidth: 20rem;
        --gridWidth: 90%;
    }

    .grid {
        margin-left: auto;
        margin-right: auto;
        max-width: var(--gridMaxWidth);
        width: var(--gridWidth);
    }

    /* helpers/hidden.css */

    .hidden {
        border: 0;
        clip: rect(0 0 0 0);
        height: 1px;
        margin: -1px;
        overflow: hidden;
        padding: 0;
        position: absolute;
        width: 1px;
    }

    /* helpers/icon.css */

    :root {
        --iconFill: var(--baseColor);
    }



    /* layout/base.css */

    :root {
        --htmlFontSize: 100%;
        --bodyBackgroundColor: #2c3338;
        --bodyColor: var(--baseColor);
        --bodyFontFamily: 'Open Sans';
        --bodyFontFamilyFallback: sans-serif;
        --bodyFontSize: 0.875rem;
        --bodyFontWeight: 400;
        --bodyLineHeight: 1.5;
    }

    * {
        box-sizing: inherit;
    }

    html {
        box-sizing: border-box;
        font-size: var(--htmlFontSize);
        height: 100%;
    }

    body {
        background-color: var(--bodyBackgroundColor);
        color: var(--bodyColor);
        font-family: var(--bodyFontFamily), var(--bodyFontFamilyFallback);
        font-size: var(--bodyFontSize);
        font-weight: var(--bodyFontWeight);
        height: 100%;
        line-height: var(--bodyLineHeight);
        margin: 0;
        min-height: 100vh;
    }

    /* modules/anchor.css */

    :root {
        --anchorColor: #eee;
    }

    a {
        color: var(--anchorColor);
        outline: 0;
        text-decoration: none;
    }

        a:focus,
        a:hover {
            text-decoration: underline;
        }

    /* modules/form.css */

    :root {
        --formFieldMargin: 0.875rem;
    }

    input {
        background-image: none;
        border: 0;
        color: inherit;
        font: inherit;
        margin: 0;
        outline: 0;
        padding: 0;
        transition: background-color 0.3s;
    }

        input[type='submit'] {
            cursor: pointer;
        }

    .form {
        margin: calc(var(--formFieldMargin) * -1);
    }




    /* modules/login.css */

    :root {
        --loginBorderRadus: 0.25rem;
        --loginColor: #eee;
        --loginInputBackgroundColor: #3b4148;
        --loginInputHoverBackgroundColor: #434a52;
        --loginLabelBackgroundColor: #363b41;
        --loginSubmitBackgroundColor: #0089D5;
        --loginSubmitColor: #eee;
        --loginSubmitHoverBackgroundColor: #0089D5;
    }

    .login {
        color: var(--loginColor);
    }

        .login label,
        .login input[type='text'],
        .login input[type='password'],
        .login input[type='submit'] {
            border-radius: var(--loginBorderRadus);
            padding: 1rem;
        }

        .login label {
            background-color: var(--loginLabelBackgroundColor);
            border-bottom-right-radius: 0;
            border-top-right-radius: 0;
            padding-left: 1.25rem;
            padding-right: 1.25rem;
        }

        .login input[type='password'],
        .login input[type='text'] {
            background-color: var(--loginInputBackgroundColor);
            border-bottom-left-radius: 0;
            border-top-left-radius: 0;
        }

            .login input[type='password']:focus,
            .login input[type='password']:hover,
            .login input[type='text']:focus,
            .login input[type='text']:hover {
                background-color: var(--loginInputHoverBackgroundColor);
                color: white;
            }

        .login input[type='submit'] {
            background-color: var(--loginSubmitBackgroundColor);
            color: var(--loginSubmitColor);
            font-weight: 700;
            text-transform: uppercase;
        }

            .login input[type='submit']:focus,
            .login input[type='submit']:hover {
                background-color: var(--loginSubmitHoverBackgroundColor);
            }

    /* modules/text.css */

    :root {
        --paragraphMarginBottom: 1.5rem;
        --paragraphMarginTop: 1.5rem;
    }

    p {
        margin-bottom: var(--paragraphMarginBottom);
        margin-top: var(--paragraphMarginTop);
    }

    .text--center {
        text-align: center;
    }
</style>
<button class="col-md-3 mt-4 d-flex justify-content-left btn btn-black text-black" @onclick="@(()=> uriHelper.NavigateTo("/ConsultarProducto"))">
    <strong><i class="fas fa-search mr-2 text-info"></i>Consultar Precios</strong>
</button>
<body class="align">

    <div class="grid">

        <div class="form login">
            @if (!bandera)
            {
                <div class="d-flex justify-content-center mb-4 pb-4"><h1 style="font-size:4rem"><strong><span class="text-info text-shadow: 2px 2px 2px #FFFF;">BIENVENIDOS...</span></strong></h1></div>

                <EditForm Model="userInfo" OnValidSubmit="PreLoginUsuario">
                    <div class="input-group mb-2 col-md-12 mt-2">
                        <div class="col-md-12">
                            <div class="input-group input-group-sm mb-1 mt-1">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="inputGroup-sizing-sm"><i class="icon fas fa-user"></i></span>
                                </div>
                                <input type="text" class="form-control" @bind="@userInfo.username" />

                            </div>


                        </div>
                    </div>






                    <div class="input-group mb-2 col-md-12  mt-2">
                        <div class="col-md-12">
                            <div class="input-group input-group-sm mb-1 mt-1">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="inputGroup-sizing-sm"><i class="fas fa-key text-warning"></i></span>
                                </div>
                                <input type="password" Class="form-control" @bind="@userInfo.Password" autocomplete="off" />

                            </div>

                        </div>
                    </div>










                    <button type="submit" class="btn mt-4 bg-info text-white" style="width:100%"><i class="fas fa-sign-out-alt mr-2"></i>INGRESAR</button>
                </EditForm>
            }



            else
            {
                @if (sucursales.Count > 0)
                {
                    <div>

                        <h4>
                            <strong>
                                <span class="badge badge-info pl-4">
                                    <strong>HOLA, @userInfo.username</strong>
                                </span>
                            </strong>
                        </h4>
                        <h5>
                            <strong>
                                <span class="badge badge-light pl-4">
                                    <strong>ELIGE UNA SUCURSAL</strong>
                                </span>
                            </strong>
                        </h5>
                        <select class="form-control" @onchange="(async (ChangeEventArgs e) => { sucursal = sucursales.Where(x => x.SucursalId == Convert.ToInt32(e.Value.ToString())).First(); await LoginUsuario(); }) ">
                            <option selected disabled>Sucursales</option>
                            @foreach (Sucursal sucursal in sucursales)
                            {
                                <option value="@sucursal.SucursalId">@sucursal.nombreSucursal</option>
                            }
                        </select>
                    </div>

                }
                else
                { <h4 class="text-info">NO TIENES SUCURSALES HABILITADAS... PONTE EN CONTACTO CON EL ADMINISTRADOR DEL SISTEMA =(</h4>
                    <button class="col-md-12 mt-4 d-flex justify-content-center btn btn-info" @onclick="@(()=> uriHelper.NavigateTo("/"))">VOLVER</button>}
            }
        </div>

    </div>

</body>



@code {
    private UserInfo userInfo = new UserInfo();
    public List<Sucursal> sucursales { get; set; } = new List<Sucursal>();
    public Sucursal sucursal { get; set; } = new Sucursal();
    public UserEntradas ultimaEntrada { get; set; }
    public bool bandera { get; set; } = false;

    private async Task LoginUsuario()
    {
        userInfo.Email = "";
        if (userInfo.username != "" && userInfo.username != null && userInfo.Password != "" && userInfo.Password != null)
        {
            var result = await http.PostJsonAsync<UserToken>($"api/cuentas/login/{sucursal.SucursalId}", userInfo);
            await loginService.Login(result.Token);



            uriHelper.NavigateTo("/");
        }
        else
        {
            await Alerta("top-end", "error", "Usuario o contraseña Incorrectos");

        }


    }

    private async Task PreLoginUsuario()
    {
        if (userInfo.username != "" && userInfo.username != null && userInfo.Password != "" && userInfo.Password != null)
        {
            bandera = await http.PostJsonAsync<bool>($"api/Cuentas/PreLogin", userInfo);
            if (!bandera)
            {

                await Alerta("top-end", "error", "Usuario o contraseña Incorrectos");
            }
            else
            {
                sucursales = await http.GetJsonAsync<List<Sucursal>>($"/api/Cuentas/UserSucursal/{userInfo.username}");


            }
        }
        else
        {
            await Alerta("top-end", "error", "Usuario o contraseña Incorrectos");

        }

    }

    public async Task Alerta(string posicion = "top-end", string icono = "success", string mensaje = "Se creó el producto con éxito")
    {
        await js.InvokeAsync<object>("alerta", posicion, icono, mensaje);
    }

}
