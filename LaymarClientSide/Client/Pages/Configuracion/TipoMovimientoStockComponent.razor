@using LaymarClientSide.Shared.Entidades
@inject HttpClient http
@page  "/tipoMovimientoStock"
@inject IJSRuntime js
@attribute [Authorize(Roles = "Configuracion, Admin")]


<h2 class="mt-2">

    <strong>
        <span class="badge badge-light">
            <strong>TIPOS MOVIMIENTO STOCK</strong>
        </span>
    </strong>
</h2>
<div class="botonera row col-md-12 mx-0 border bg-light border-solid rounded pt-2">
    @*Boton Crear*@
    <button class="btn text-primary btn-sm  mb-3 mr-2 border border-solid rounded" title="Crear" @onclick="@(async () => { await CrearTipoMovimientoStock(); await HabilitarFormulario(); })"><i class="fas fa-plus-circle"></i></button>


    @*texto Buscar*@

    <div class="input-group mb-3 col-md-3">
        <div class="input-group-prepend input-group-sm" @onclick="@( async () => { await BuscarTipoMovimientoStock(cadenaBusqueda); await DeshabilitarFormulario(); })">
            <span class="input-group-text" id="basic-addon1">Código</span>
        </div>
        <input type="text" class="form-control" @bind-value="@cadenaBusqueda" @bind-value:event="oninput" @onkeypress="@(async (KeyboardEventArgs e) => { if (e.Key == "Enter") { await BuscarTipoMovimientoStock(cadenaBusqueda); } })" />


    </div>
    @*Boton buscar*@
    <button class="btn text-primary  mb-3 btn-sm border mr-2 border-solid rounded" title="Anular" @onclick="(async () => { tipoMovimientosStockBuscados = tipoMovimientosStock; await ModalToggle(); })"><i class="fas fa-search m-0 p-0"></i></button> @*Boton Anular*@

    @if (tipoMovimientosStock.Count > 0)
    {


        @*Boton Anterior*@
        @if (tipoMovimientosStock.First() != tipoMovimientoStock)
        {
            <button class="btn mb-3 btn-sm border border-solid rounded mr-2" @onclick="@(async () => { cadenaBusqueda = Convert.ToString(Convert.ToInt32(cadenaBusqueda) - 1); await BuscarTipoMovimientoStock(cadenaBusqueda); await DeshabilitarFormulario();})">
                <i class="fas fa-backward"></i>
            </button>
        }
        else
        {
            <button class="btn mb-3 btn-sm border border-solid rounded mr-2 disabled" disabled @onclick="@(async () => { cadenaBusqueda = Convert.ToString(Convert.ToInt32(cadenaBusqueda) - 1); await BuscarTipoMovimientoStock(cadenaBusqueda); })">
                <i class="fas fa-backward"></i>
            </button>
        }
        @*Boton Siguiente*@

        @if (tipoMovimientosStock.Last() != tipoMovimientoStock)
        {
            <button class="btn mb-3 btn-sm border border-solid rounded mr-2" @onclick="@(async () => { cadenaBusqueda = Convert.ToString(Convert.ToInt32(cadenaBusqueda) + 1); await BuscarTipoMovimientoStock(cadenaBusqueda); await DeshabilitarFormulario(); })">
                <i class="fas fa-forward"></i>
            </button>

        }
        else
        {
            <button class="btn mb-3 btn-sm border border-solid rounded mr-2 disabled" disabled @onclick="@(async () => { cadenaBusqueda = Convert.ToString(Convert.ToInt32(cadenaBusqueda) + 1); await BuscarTipoMovimientoStock(cadenaBusqueda); await DeshabilitarFormulario(); })">
                <i class="fas fa-forward"></i>
            </button>
        }

    }


</div>

@*FORMULARIO*@
<div class="row col-md-12 mx-0 bg-dark mt-1 rounded"><h4 class="mt-2 text-white py-1"><strong>@AccionSobreTipoMovimientoStock.ToUpper()</strong></h4></div>

<div class="bg-light mt-2">
    <EditForm Model=@tipoMovimientoStock OnValidSubmit="@GuardarTipoMovimientoStock">
        <ObjectGraphDataAnnotationsValidator />

        <fieldset disabled id="FieldSetFormulario" class="">
            @if (tipoMovimientoStock.fechaBaja != null)
            {
                <div class="row col-md-12 mx-0 mt-3"><h5 class="ml-2"><strong class="text-danger">Anulado @tipoMovimientoStock.fechaBaja</strong></h5></div>
            }
            <div class="input-group mb-2 col-md-12 mt-2">
                <div class="col-md-4">
                    <div class="input-group input-group-sm mb-1 mt-1">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroup-sizing-sm">Código</span>
                        </div>
                        <input type="text" class="form-control disabled" disabled @bind-value="@tipoMovimientoStock.TipoMovimientoStockId">

                    </div>


                </div>
            </div>
            @*DATOS  DEL PROVEEDOR*@
            <div class="row col-md-12 mx-0 mb-2 border-top border-solid text-primary pt-3"><strong>DATOS DE LA TIPO MOVIMIENTO STOCK</strong></div>

            <div class="row col-md-12 mx-0">

                <div class="input-group input-group-sm mb-3 col-md-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="inputGroup-sizing-sm">Nombre TipoMovimientoStock</span>
                    </div>
                    <input type="text" class="form-control " @bind-value="@tipoMovimientoStock.nombreTipoMovimientoStock">
                    <ValidationMessage For="@(() => tipoMovimientoStock.nombreTipoMovimientoStock)" />

                </div>
            </div>

        </fieldset>
        @*Boton Guardar*@
        <div class="d-flex justify-content-center row col-md-12 mx-0 px-0 mt-2">

            @if (AccionSobreTipoMovimientoStock == "Crear" || AccionSobreTipoMovimientoStock == "Editar")
            {
                <button type="submit" class="btn btn-success col-md-12"><i class="fas fa-save mr-1"></i> Guardar</button>
            }
            else
            {

                <button type="submit" class="btn btn-success col-md-12 disabled" disabled><i class="fas fa-save mr-1"></i> Guardar</button>

            }
        </div>

    </EditForm>

    <div class="modal p-0 fade" id="modal" data-backdrop="static" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Buscar TipoMovimientoStock</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(async () => { await ModalToggle();  })">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body p-3 m-2" data-spy="scroll">
                    @*BODY *@
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <button type="button" class="btn btn-outline-secondary">@(criterioBusqueda == String.Empty ? "Nombre" : criterioBusqueda) </button>
                            <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <span class="sr-only">Toggle Dropdown</span>
                            </button>
                            <div class="dropdown-menu">
                                <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Codigo")">Codigo</a>

                                <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Nombre")">Nombre</a>


                            </div>
                        </div>
                        <input type="text" class="form-control" @bind-value="@cadenafiltroBusqueda" @bind-value:event="oninput" @onkeypress="@((KeyboardEventArgs e)=> {  FiltrarTipoMovimientoStock(e); })">

                        <div>

                        </div>

                        <table class="table table-striped mt-3 table-sm">
                            <thead class="bg-dark text-white">

                                <tr>
                                    <th>Código</th>
                                    <th>Nombre TipoMovimientoStock</th>
                                    <th>Acciones</th>

                                </tr>
                            </thead>
                            <tbody>
                                @if (tipoMovimientosStock.Count > 0)
                                {
                                    @foreach (TipoMovimientoStock tipoMovimientoStock in tipoMovimientosStockBuscados)
                                    {
                                        <tr>
                                            <td>@tipoMovimientoStock.TipoMovimientoStockId</td>
                                            <td>@tipoMovimientoStock.nombreTipoMovimientoStock</td>

                                            <td><button class="btn" @onclick="@(async () => { await BuscarTipoMovimientoStock(Convert.ToString(tipoMovimientoStock.TipoMovimientoStockId)); await ModalToggle(); cadenaBusqueda = Convert.ToString(tipoMovimientoStock.TipoMovimientoStockId); })"><i class="far fa-eye text-primary"></i></button></td>
                                        </tr>
                                    }

                                }

                            </tbody>
                        </table>
                    </div>
                </div>

            </div>
        </div>
    </div>


</div>



@code {
    public bool valido { get; set; } = true;
    public string cadenaBusqueda { get; set; }
    public string cadenafiltroBusqueda { get; set; } = String.Empty;
    public string criterioBusqueda { get; set; } = "Nombre";

    public string AccionSobreTipoMovimientoStock { get; set; } = "Detalles";
    public TipoMovimientoStock tipoMovimientoStock { get; set; } = new TipoMovimientoStock();
    public List<TipoMovimientoStock> tipoMovimientosStock { get; set; } = new List<TipoMovimientoStock>();
    public List<TipoMovimientoStock> tipoMovimientosStockBuscados { get; set; } = new List<TipoMovimientoStock>();



    protected override async Task OnInitializedAsync()
    {
       
        await ListarTipoMovimientosStock();
        if (tipoMovimientosStock.Count > 0)
        {
            tipoMovimientoStock = tipoMovimientosStock.Last();
            cadenaBusqueda = Convert.ToString(tipoMovimientoStock.TipoMovimientoStockId);
        }

    }
    protected async Task ListarTipoMovimientosStock()
    {
        tipoMovimientosStock = await http.GetJsonAsync<List<TipoMovimientoStock>>("/api/TipoMovimientoStock/Listar");
    }

    protected async Task BuscarTipoMovimientoStock(string codigo)
    {
        TipoMovimientoStock tipoMovimientoStockEncontrado = null;
        AccionSobreTipoMovimientoStock = "Detalles";
        try
        {
            tipoMovimientoStockEncontrado = tipoMovimientosStock.Where(x => x.TipoMovimientoStockId == Convert.ToInt32(codigo)).First();

        }
        catch (Exception)
        {

        }

        if (tipoMovimientoStockEncontrado != null)
        {
            tipoMovimientoStock = tipoMovimientoStockEncontrado;
            if (tipoMovimientoStock.fechaBaja != null)
            {
                valido = false;
            }
            else { valido = true; }
        }
        else
        {
            cadenaBusqueda = Convert.ToString(tipoMovimientoStock.TipoMovimientoStockId);
            await Alerta("top-end", "error", "TipoMovimientoStock inexistente");

        }
        await DeshabilitarFormulario();

    }

    protected async Task GuardarTipoMovimientoStock()
    {
        @if (AccionSobreTipoMovimientoStock == "Crear")
        {
            await http.PostJsonAsync("/api/TipoMovimientoStock/Crear", tipoMovimientoStock);
            await DeshabilitarFormulario();

            await Alerta("top-end", "success", "Se creó con éxito");
            cadenaBusqueda = Convert.ToString(tipoMovimientoStock.TipoMovimientoStockId);

        }

        AccionSobreTipoMovimientoStock = "Detalle";

        await ListarTipoMovimientosStock();
    }

    protected async Task CrearTipoMovimientoStock()
    {
        AccionSobreTipoMovimientoStock = "Crear";
        tipoMovimientoStock = new TipoMovimientoStock();

        valido = false;
        await HabilitarFormulario();

    }


    protected void FiltrarTipoMovimientoStock(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (cadenafiltroBusqueda != "" && cadenafiltroBusqueda != string.Empty)
            {

                if (criterioBusqueda == "Nombre")
                {
                    tipoMovimientosStockBuscados = tipoMovimientosStock.Where(x => x.nombreTipoMovimientoStock.Contains(cadenafiltroBusqueda)).ToList();
                }
                if (criterioBusqueda == "Codigo")
                {
                    tipoMovimientosStockBuscados = tipoMovimientosStock.Where(x => x.TipoMovimientoStockId.ToString().Contains(cadenafiltroBusqueda)).ToList();
                }
            }
            else { tipoMovimientosStockBuscados = tipoMovimientosStock; }
        }
    }
    public async Task HabilitarFormulario()
    {
        await js.InvokeAsync<object>("EnabledFieldFormulario");
    }
    public async Task DeshabilitarFormulario()
    {
        await js.InvokeAsync<object>("DisabledFieldFormulario");
    }

    public async Task Alerta(string posicion = "top-end", string icono = "success", string mensaje = "Se creó el tipoMovimientoStock con éxito")
    {
        await js.InvokeAsync<object>("alerta", posicion, icono, mensaje);
    }

    public async Task ModalToggle()
    {
        await js.InvokeAsync<object>("ModalToggle");
    }
}
