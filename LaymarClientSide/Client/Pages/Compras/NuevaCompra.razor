@using LaymarClientSide.Shared.Entidades
@inject HttpClient http
@page  "/nuevaCompra"
@inject IJSRuntime js
@attribute [Authorize(Roles = "Compras, Admin")]
@using LaymarClientSide.Shared.Dtos
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider


<AuthorizeView Context="_context">
    <Authorized>

        @*//FORMULARIO*@


        <div class="bg-light mt-2">

            <fieldset id="FieldSetFormulario" class="border border-solid rounded p-0 m-0">
                @*DATOS  DEL COMPROBANTE*@

                <div class="bg-light">
                    <div class="row 2 mx-0 mb-2 border-top border-solid bg-dark text-white px-4 pt-3"><h3><strong>DATOS DE LA COMPRA</strong></h3></div>

                    <div class="justify-content-end d-flex row col-md-12 mt-4 mx-0 form-inline">
                        <h5 class="col-md-9">

                            <span class="badge badge-light pl-4">
                                <strong>PROVEEDOR:</strong>
                            </span>
                            <input style="height:1.8rem;" class="col-md-3 form-control" type="number" placeholder="Código Proveedor" @bind-value="@busquedaProveedor" @bind-value:event="oninput" @onkeypress="@(async (KeyboardEventArgs e)=> { if(e.Key == "Enter"){AccionModal = ""; await buscarProveedor(); } })" @onkeypress:stopPropagation />
                            <button class="btn" @onclick="@(async () => { AccionModal = "proveedor"; await ModalToggle(); })"><i class="fas fa-search"></i></button>
                        </h5>

                        <h5 class="col-md-3">
                            <span class="badge badge-light">
                                <strong>FECHA: </strong>
                            </span>
                            <strong>
                                <span class="badge badge-light">
                                    @DateTime.Now.AddHours(-3).ToString("dd/MM/yyyy")
                                </span>
                            </strong>
                        </h5>
                    </div>

                    <div class="row col-md-12 form-inline mx-0 ">


                        <h5 class=" col-md-9 ">
                            <span class="badge badge-light pl-4">
                                <strong>

                                    RAZON SOCIAL:
                                </strong>

                            </span>
                            <span class="badge badge-info text-left">
                                @compra.comprobante.personaJuridica.razonSocial
                            </span>

                        </h5>

                        <h5 class="col-md-3 ">

                            <span class="badge badge-light ">
                                <strong>SUCURSAL:</strong>
                            </span>
                            <strong>
                                <span class="badge badge-info ">
                                    @VariablesGlobales.sucursal.nombreSucursal
                                </span>
                            </strong>

                        </h5>

                    </div>

                    <div class="justify-content-end d-flex row col-md-12 mx-0">

                        <h5 class="mt-2 col-md-3">
                            <span class="badge badge-light">
                                <strong>VENDEDOR: </strong>
                            </span>
                            <strong>
                                <span class="badge badge-info">
                                    @_context.User.Identity.Name
                                </span>
                            </strong>

                        </h5>
                    </div>

                    <div class="row 2 mx-0 bg-dark mt-4 rounded text-white py-2 px-4">
                        <div class="col-md-4">
                            <h5 class="mt-2">
                                <i class="fas fa-shopping-cart mr-1 text-info"></i>
                                <strong>
                                    ARTICULOS
                                </strong>
                                <span class="badge badge-info ml-1">@compra.detalles.Count()</span>
                            </h5>
                        </div>

                        <div class="col-md-8 d-flex justify-content-end">
                            @if (compra.detalles.Count() < 50 && compra.comprobante.personaJuridica.PersonaJuridicaId != 0)
                            {

                                <button class="btn btn-info" @onclick="@(() => { compra.detalles.Add(new DetalleFactura { producto = new Producto()  }); })"><i class="fas fa-plus-circle"></i></button>
                            }
                            else
                            {
                                <button class="btn btn-dark disabled" disabled><i class="fas fa-plus-circle"></i></button>

                            }
                        </div>
                    </div>
                </div>
                <table class="row col-md-12 mx-0 px-0 table px-1  table-sm mt-2 table-responsive-sm table-bordered table-hover">
                    <thead class="bg-light col-md-12 mx-0 px-0 ">
                        <tr class="col-md-12 row mx-0 px-0 text-center d-flex justify-content-center bg-info text-white " style="height:2.5rem">
                            <th class="col-md-2" style="height:2.5rem">CODIGO</th>
                            <th class="col-md-5" style="height:2.5rem">DESCRIPCION TALLE COLOR  MARCA</th>

                            <th class="col-md-1" style="height:2.5rem">CANTIDAD</th>
                            <th class="col-md-1" style="height:2.5rem">P/UNIDAD</th>
                            <th class="col-md-1" style="height:2.5rem">DESC.</th>
                            <th class="col-md-1" style="height:2.5rem">IMPORTE</th>
                            <th class="col-md-1" style="height:2.5rem">ACCIONES</th>

                        </tr>
                    </thead>
                    <tbody class="col-md-12 mx-0 px-0">
                        @foreach (DetalleFactura detalleFactura in compra.detalles)
                        {
                            <tr class="col-md-12 row mx-0 px-0 " style="height:2.5rem">
                                <td class="col-md-2 form-inline text-center" style="height:2.5rem; padding:2px 8px 2px 8px">
                                    <input type="text" autofocus name="cod" class=" form-control col-md-8" style="height:1.8rem;" @bind-value="@detalleFactura.cadenaBusquedaProducto" @bind-value:event="oninput" @onkeypress="@(async(KeyboardEventArgs e)=> { if(e.Key == "Enter"){ AccionModal = ""; await buscarProducto(detalleFactura); } })" />
                                    <button class="btn col-md-4" @onclick="@((async () => { detalleActual = detalleFactura; await ModalToggle(); AccionModal = "producto"; }))">
                                        <i class="fas fa-search"></i>
                                    </button>

                                </td>

                                <td class="col-md-5 text-center " style="height:2.5rem; padding:2px 8px 2px 8px">
                                    <h5 class="mt-1">

                                        <span class="badge badge-light text-center">@detalleFactura.producto.nombre</span>
                                        <span class="badge badge-light text-center">@detalleFactura.producto.talle</span>

                                        <span class="badge badge-light text-center"> @detalleFactura.producto.color </span>
                                        <span class="badge badge-light text-center"> @detalleFactura.producto.marca </span>
                                    </h5>

                                </td>



                                <td class="col-md-1" style="height:2.5rem; padding:2px 8px 2px 8px">
                                    <input type="number" class="form-control col-md-12" @bind="@detalleFactura.cantidad" style="height:1.8rem;" />
                                </td>
                                <td class="col-md-1 text-center " style="height:2.5rem; padding:2px 8px 2px 8px">
                                    <h5>

                                        <span class="badge badge-light text-center">
                                            $@(detalleFactura.producto.precioUnitario * (detalleFactura.producto.porcentajeRentabilidad / 100 + 1))
                                        </span>
                                    </h5>

                                </td>
                                <td class="col-md-1" style="height:2.5rem; padding:2px 8px 2px 8px">
                                    <AuthorizeView Roles="Admin" Context="_context2">
                                        <Authorized>
                                            <input class="form-control col-md-12" type="number" step="0.01" @bind="@detalleFactura.bonificacion" style="height:1.8rem;" />

                                        </Authorized>
                                        <NotAuthorized>
                                            <input class="form-control col-md-12 disabled" disabled type="number" step="0.01" @bind="@detalleFactura.bonificacion" style="height:1.8rem;" />

                                        </NotAuthorized>
                                    </AuthorizeView>
                                </td>
                                <td class="col-md-1 text-center" style="height:2.5rem; padding:2px 8px 2px 8px">
                                    <h5>
                                        <span class="badge badge-light text-center">
                                            $@(((detalleFactura.producto.precioUnitario * (detalleFactura.producto.porcentajeRentabilidad / 100 + 1)) - detalleFactura.bonificacion) * detalleFactura.cantidad)
                                        </span>
                                    </h5>
                                </td>
                                <td class="col-md-1 d-flex justify-content-center" style="height:2.5rem; padding:2px 8px 2px 8px">
                                    <button class="btn text-danger  border border-solid rounded" title="Eliminar" @onclick="(() => compra.detalles.Remove(detalleFactura))" @onkeypress="@(async (KeyboardEventArgs e) => { Console.WriteLine(e.Key); if(e.Key == "Tab"){ if (compra.detalles.Last() == detalleFactura) { compra.detalles.Add(new DetalleFactura { producto = new Producto()  }); }}  })"><i class="far fa-trash-alt text-danger"></i></button>
                                </td>

                            </tr>
                        }
                    </tbody>
                </table>
                @*RESUMEN*@
                <div class="row col-md-12 mx-0 my-3 px-0">
                    <div class="row 2 col-md-12 mx-0 bg-dark mt-1 rounded text-white mb-4 px-0">
                        <h5 class="mt-2 pl-4">
                            <strong><i class="far fa-file-alt text-info mr-1"></i>RESUMEN</strong>
                        </h5>
                    </div>

                    <div class="col-md-12 row mx-0 form-inline">
                        <h5 class="col-md-12 row mx-0">
                            <span class="badge badge-light text-left col-md-6">
                                <strong>SUBTOTAL: $@compra.detalles.Sum(x => x.cantidad * ((x.producto.precioUnitario * (x.producto.porcentajeRentabilidad / 100 + 1)) - x.bonificacion))</strong>
                            </span>


                        </h5>
                    </div>

                    <div class="col-md-12 row mx-0 mx-0 ">


                        <h5 class="col-md-12 row mx-0 form-inline">
                            <span class="badge badge-light text-left col-md-6">
                                <strong class="mt-1"> BONIFICACION: $</strong>

                                <AuthorizeView Roles="Admin" Context="_context2">
                                    <Authorized>
                                        <input type="number" placeholder="Descuento" class="ml-1 col-md-4 form-control" style="height:1.8rem;" @bind-value="@compra.comprobante.bonificacion" />

                                    </Authorized>
                                    <NotAuthorized>
                                        <input type="number" placeholder="Descuento" class="ml-1 col-md-4 form-control disabled" disabled style="height:1.8rem;" @bind-value="@compra.comprobante.bonificacion" />

                                    </NotAuthorized>
                                </AuthorizeView>

                            </span>

                        </h5>
                    </div>


                    <div class="col-md-12 row mx-0">
                        <h5 class="col-md-12 row mx-0">

                            <span class="badge badge-dark text-left col-md-6">
                                <strong>TOTAL COMPRA: $@(compra.detalles.Sum(x => x.cantidad * ((x.producto.precioUnitario * (x.producto.porcentajeRentabilidad / 100 + 1)) - x.bonificacion)) - compra.comprobante.bonificacion)</strong>
                            </span>

                            <span class="badge badge-dark text-left col-md-6 d-flex justify-content-end">
                                <strong>TOTAL PAGO: $@(compra.comprobante.tarjeta + compra.comprobante.efectivo)</strong>
                            </span>
                        </h5>
                    </div>
                </div>

            </fieldset>




            @*Boton Guardar*@
            <div class="d-flex justify-content-center row col-md-12 mx-0 px-0 mt-2">

                @if (AccionSobreComprobante == "Crear" || AccionSobreComprobante == "Editar")
                {
                    <button @onclick="GuardarCompra" class="btn btn-success col-md-12"><i class="fas fa-save mr-1"></i> Guardar Compra</button>
                }
                else
                {

                    <button @onclick="GuardarCompra" class="btn btn-success col-md-12 "><i class="fas fa-save mr-1"></i> Guardar Compra</button>

                }
            </div>



        </div>

        @*//MODAL*@
        <div class="modal p-0 fade" id="modal" data-backdrop="static" tabindex="-1" role="dialog">
            <div class="modal-dialog moda-lg rounded border border-solid" role="document">
                <div class="modal-content">
                    <div class="modal-header bg-dark text-white">
                        <h5 class="modal-title">@((AccionModal == "producto") ? "PRODUCTOS": "ProveedorS")</h5>
                        <button type="button" class="close" data-dimdiss="modal" aria-label="Close" @onclick="@(async () => {AccionModal=""; await ModalToggle(); })">
                            <span class="text-danger" aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body p-2 m-1" data-spy="scroll">
                        @if (AccionModal == "producto")
                        {
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <button type="button" class="btn btn-outline-secondary">@(criterioBusqueda == String.Empty ? "Nombre" : criterioBusqueda) </button>
                                    <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <span class="sr-only">Toggle Dropdown</span>
                                    </button>
                                    <div class="dropdown-menu">
                                        <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Codigo")">Codigo</a>
                                        <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Nombre")">Nombre</a>
                                        <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Marca")">Marca</a>
                                        <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Talle")">Talle</a>
                                        <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Color")">Color</a>
                                    </div>
                                </div>
                                <input type="text" class="form-control" @bind-value="@cadenafiltroBusqueda" @bind-value:event="oninput" @onkeypress="@((KeyboardEventArgs e) => { FiltrarProducto(e); })">

                                <div>

                                </div>

                                <table class="table table-striped mt-3 table-sm">
                                    <thead class="bg-dark text-white">

                                        <tr>
                                            <th>Código</th>
                                            <th>Nombre</th>
                                            <th>Marca</th>
                                            <th>Talle</th>
                                            <th>Color</th>
                                            <th>Acciones</th>

                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (productos.Count > 0)
                                        {
                                            @foreach (Producto producto in productosBuscados)
                                            {
                                                <tr>
                                                    <td>@producto.ProductoId</td>
                                                    <td>@producto.nombre</td>
                                                    <td>@producto.marca</td>
                                                    <td>@producto.talle</td>
                                                    <td>@producto.color</td>

                                                    <td><button class="btn" @onclick="@(async () => { detalleActual.producto = producto; AccionModal = ""; await ModalToggle(); cadenaBusqueda = Convert.ToString(producto.ProductoId); })"><i class="far fa-eye text-primary"></i></button></td>
                                                </tr>
                                            }

                                        }

                                    </tbody>
                                </table>
                            </div>
                        }
                        else if (AccionModal == "proveedor")
                        {
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <button type="button" class="btn btn-outline-secondary">@(criterioBusqueda == String.Empty ? "Razon Social" : criterioBusqueda) </button>
                                    <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <span class="sr-only">Toggle Dropdown</span>
                                    </button>
                                    <div class="dropdown-menu">

                                        <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Razon Social")">Razon Social</a>
                                        <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Codigo")">Codigo</a>

                                    </div>
                                </div>
                                <input type="text" class="form-control" @bind-value="@cadenafiltroBusqueda" @bind-value:event="oninput" @onkeypress="@((KeyboardEventArgs e) => { FiltrarProveedor(e); })">

                                <div>

                                </div>

                                <table class="table table-striped mt-3 table-sm">
                                    <thead class="bg-dark text-white">

                                        <tr>
                                            <th>Código</th>
                                            <th>Razón Social</th>
                                            <th>Accciones</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (proveedores.Count > 0)
                                        {
                                            @foreach (Proveedor proveedor in ProveedorsBuscados)
                                            {
                                                <tr>
                                                    <td>@proveedor.PersonaJuridicaId</td>
                                                    <td>@proveedor.razonSocial</td>
                                                    <td><button class="btn" @onclick="@(async () => {busquedaProveedor = proveedor.PersonaJuridicaId; compra.comprobante.personaJuridica = proveedor; AccionModal = ""; await ModalToggle(); })"><i class="far fa-eye text-primary"></i></button></td>
                                                </tr>
                                            }

                                        }

                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>

                </div>
            </div>
        </div>


    </Authorized>
</AuthorizeView>

@code {
    public bool valido { get; set; } = true;
    public string cadenaBusqueda { get; set; }
    public string cadenafiltroBusqueda { get; set; } = String.Empty;
    public string criterioBusqueda { get; set; } = "Codigo";
    public string AccionSobreComprobante { get; set; } = "Detalles";
    public string AccionModal { get; set; } = "";
    public int busquedaProveedor { get; set; }
    public bool ExisteCajaDiariaBandera { get; set; } = true;

    public List<Producto> productos { get; set; } = new List<Producto>();
    public List<Producto> productosBuscados { get; set; } = new List<Producto>();


    public Proveedor proveedor { get; set; } = new Proveedor();
    public List<Proveedor> proveedores { get; set; } = new List<Proveedor>();
    public List<Proveedor> ProveedorsBuscados { get; set; } = new List<Proveedor>();

    public FacturaDto compra { get; set; } = new FacturaDto
    {
        comprobante = new Comprobante { personaJuridica = new Proveedor() },
        detalles = new List<DetalleFactura>()
    };

    public DetalleFactura detalleActual { get; set; } = new DetalleFactura();

    protected override async Task OnInitializedAsync()
    {

      
        await ExisteCajaDiaria();

        await ListarProductos();
        await ListarProveedores();
    }
    protected async Task ExisteCajaDiaria()
    {
        ExisteCajaDiariaBandera = await http.PostJsonAsync<bool>($"/api/Caja/ExisteCajaDia", VariablesGlobales.sucursal);

    }
    protected async Task ListarProveedores()
    {
        proveedores = await http.GetJsonAsync<List<Proveedor>>("/api/Proveedor/Listar");
        proveedores = proveedores.Where(x => x.fechaBaja == null).ToList();
        ProveedorsBuscados = proveedores;
    }
    protected async Task ListarProductos()
    {
        productos = await http.GetJsonAsync<List<Producto>>("/api/Producto/Listar");
        productos = productos.Where(x => x.fechaBaja == null).ToList();
        productosBuscados = productos;
    }

    protected async Task GuardarCompra()
    {
        bool bandera = false;

        foreach (DetalleFactura detalle in compra.detalles)
        {
            @if (detalle.cantidad == 0 || detalle.producto.ProductoId == 0)
            {
                bandera = true;
            }
        }
        compra.comprobante.importe = compra.detalles.Sum(x => x.cantidad * ((x.producto.precioUnitario * (x.producto.porcentajeRentabilidad / 100 + 1)) - x.bonificacion)) - compra.comprobante.bonificacion;

        if (compra.comprobante.personaJuridica == null || compra.comprobante.personaJuridica.PersonaJuridicaId == 0)
        {
            await Alerta("top-end", "error", "Tienes que seleccionar un proveedor");

        }
        else if (compra.detalles.Count == 0)
        {
            await Alerta("top-end", "error", "Tienes que cargar al menos un artículo");

        }
        else if (bandera)
        {
            await Alerta("top-end", "error", "No pueden haber renglones sin productos o sin cantidad");

        }

        else
        {
            try
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                compra.comprobante.UserName = authState.User.Identity.Name;

                compra.comprobante.sucursal = VariablesGlobales.sucursal;
                await http.PostJsonAsync("/api/Comprobante/CrearCompra", compra);
                await Alerta("top-end", "success", "Se creó la compra con éxito");
                compra = new FacturaDto
                {
                    comprobante = new Comprobante { personaJuridica = new Cliente() },
                    detalles = new List<DetalleFactura>()
                };

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                await Alerta("top-end", "error", "Ocurrio un error");
            }
        }
    }
    protected async Task buscarProducto(DetalleFactura detalle)
    {
        Console.WriteLine("buscar productos");
        Console.WriteLine(detalle.cadenaBusquedaProducto);

        try
        {

            detalle.producto = productos.Where(x => x.ProductoId == Convert.ToInt32(detalle.cadenaBusquedaProducto)).First();
        }
        catch (Exception)
        {
            await Alerta("top-end", "error", "Producto Inexistente");
        }

    }

    protected async Task buscarProveedor()
    {
        try
        {
            compra.comprobante.personaJuridica = proveedores.Where(x => x.PersonaJuridicaId == busquedaProveedor).First();

        }
        catch (Exception)
        {

            await Alerta("top-end", "error", "Proveedor Inexistente");
        }


    }


    protected void ChangePrecio(DetalleFactura detalle)
    {

        detalle.subtotal = (detalle.producto.precioUnitario * (detalle.producto.porcentajeRentabilidad / 100 + 1)) - detalle.bonificacion;
    }
    protected async Task CrearComprobante()
    {
        AccionSobreComprobante = "Crear";
        compra = new FacturaDto();

        valido = false;
        await HabilitarFormulario();

    }


    protected void FiltrarProducto(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (cadenafiltroBusqueda != "" && cadenafiltroBusqueda != string.Empty)
            {
                try
                {
                    if (criterioBusqueda == "Codigo")
                    {
                        productosBuscados = productos.Where(x => x.ProductoId.ToString().ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }
                    if (criterioBusqueda == "Nombre")
                    {
                        productosBuscados = productos.Where(x => x.nombre.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }
                    if (criterioBusqueda == "Marca")
                    {
                        productosBuscados = productos.Where(x => x.marca.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }
                    if (criterioBusqueda == "Proveedor")
                    {
                        productosBuscados = productos.Where(x => x.proveedor.razonSocial.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }
                    if (criterioBusqueda == "Talle")
                    {
                        productosBuscados = productos.Where(x => x.talle.Contains(cadenafiltroBusqueda)).ToList();
                    }
                    if (criterioBusqueda == "Color")
                    {
                        productosBuscados = productos.Where(x => x.color.Contains(cadenafiltroBusqueda)).ToList();
                    }
                }
                catch (Exception)
                {


                }

            }
            else { productosBuscados = productos; }
        }
    }
    protected void FiltrarProveedor(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (cadenafiltroBusqueda != "" && cadenafiltroBusqueda != string.Empty)
            {
                if (criterioBusqueda == "Razon Social")
                {
                    ProveedorsBuscados = proveedores.Where(x => x.razonSocial.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                }

                if (criterioBusqueda == "Codigo")
                {
                    ProveedorsBuscados = proveedores.Where(x => x.ProveedorId.Contains(cadenafiltroBusqueda)).ToList();
                }
            }
            else { ProveedorsBuscados = proveedores; }
        }
    }

    public async Task HabilitarFormulario()
    {
        await js.InvokeAsync<object>("EnabledFieldFormulario");
    }
    public async Task DeshabilitarFormulario()
    {
        await js.InvokeAsync<object>("DisabledFieldFormulario");
    }

    public async Task Alerta(string posicion = "top-end", string icono = "success", string mensaje = "Se creó el comprobante con éxito")
    {
        await js.InvokeAsync<object>("alerta", posicion, icono, mensaje);
    }

    public async Task ModalToggle()
    {
        await js.InvokeAsync<object>("ModalToggle");
    }
}
