@using LaymarClientSide.Shared.Entidades
@inject HttpClient http
@attribute [Authorize(Roles = "Admin")]
@using LaymarClientSide.Shared.Dtos
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@page  "/VentasTarjeta"


@inject IJSRuntime js
<AuthorizeView>
    <h2 class="mt-2">
        <strong>
            <span class="badge badge-light">
                <strong>
                    <i class="fas fa-credit-card text-info mr-2 px-0"></i>
                    VENTAS CON TARJETA
                </strong>
            </span>
        </strong>
    </h2>





    <div class="p-3 m-2 px-0" data-spy="scroll">
        @*BODY *@
        <div class="col-md-12 row mx-0 px-0">
            <div class="input-group col-md-3 mb-3 mx-0 px-0">
                <div class="input-group-prepend input-group-sm ">
                    <span class="input-group-text " id="basic-addon1">Desde</span>
                </div>
                <input type="date" class="form-control" value="@DateTime.Now.AddHours(-3).ToString("yyyy-MM-dd")" @onchange="@(async (ChangeEventArgs e)=> { fechaDesde = Convert.ToDateTime(e.Value.ToString()); await ListarVentas(); })" />
            </div>
            <div class="input-group mb-3 col-md-3">
                <div class="input-group-prepend input-group-sm">
                    <span class="input-group-text" id="basic-addon1">Hasta</span>
                </div>
                <input type="date" class="form-control" value="@DateTime.Now.AddHours(-3).ToString("yyyy-MM-dd")" @onchange="@(async (ChangeEventArgs e)=> { fechaHasta = Convert.ToDateTime(e.Value.ToString()); await ListarVentas(); })" />
            </div>

        </div>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <button type="button" class="btn btn-outline-secondary">@(criterioBusqueda == String.Empty ? "Razon Social" : criterioBusqueda) </button>
                <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span class="sr-only">Toggle Dropdown</span>
                </button>
                <div class="dropdown-menu">
                    <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Codigo")">Codigo</a>
                    <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Razon Social")">Razon Social</a>

                </div>
            </div>
            <input type="text" class="form-control" @bind-value="@cadenafiltroBusqueda" @bind-value:event="oninput" @onkeypress="@((KeyboardEventArgs e)=> {  FiltrarVenta(e); })">


            <table class="table table-striped mt-3">
                <thead class="bg-dark text-white">

                    <tr>
                        <th>Fecha</th>
                        <th>Código</th>
                        <th>Razon Social</th>
                        <th>Sucursal</th>
                        <th>Vendedor</th>
                        <th>Importe con Tarjeta</th>
                        <th>Importe Venta</th>
                        <th>Acciones</th>


                    </tr>
                </thead>
                <tbody>
                    @if (ventas.Count > 0)
                    {
                        @foreach (FacturaDto venta in ventasBuscadas)
                        {
                            <tr>
                                <td>@venta.comprobante.fechaAlta</td>
                                <td>@venta.comprobante.codigo</td>
                                <td>@venta.comprobante.personaJuridica.razonSocial</td>
                                <td>@venta.comprobante.sucursal.nombreSucursal</td>
                                <td>@venta.comprobante.UserName</td>
                                <td>$ @venta.comprobante.tarjeta</td>

                                <td>$ @venta.comprobante.importe</td>

                                <td><button class="btn" @onclick="@(async () => { await BuscarVenta(venta.comprobante.codigo); await ModalToggle(); cadenaBusqueda = Convert.ToString(venta.comprobante.codigo); })"><i class="far fa-eye text-primary"></i></button></td>
                            </tr>
                        }

                    }

                </tbody>
            </table>
            <div class="col-md-12 mx-0 row"></div>
            <div class="col-md-12 mx-0 row bg-dark">
                <h4 class="bg-dark text-white py-2 col-md-12 px-2"><strong class="badge badge-light">TOTAL VENDIDO CON TARJETA:</strong> <strong class="badge badge-light">$ @ventasBuscadas.Sum(x => x.comprobante.tarjeta) <i class="fas fa-credit-card text-info mr-2 px-0"></i></strong></h4>
            </div>
        </div>
    </div>




</AuthorizeView>

@code {
    public string cadenaBusqueda { get; set; }
    public string cadenafiltroBusqueda { get; set; } = String.Empty;
    public string criterioBusqueda { get; set; } = "Razon Social";
    public DateTime fechaDesde { get; set; } = DateTime.Now.AddHours(-3).Date;
    public DateTime fechaHasta { get; set; } = DateTime.Now.AddHours(-3).Date;
    public UserInfo user { get; set; }
    public List<FacturaDto> ventas { get; set; } = new List<FacturaDto>();
    public List<FacturaDto> ventasBuscadas { get; set; } = new List<FacturaDto>();
    public FacturaDto venta { get; set; } = new FacturaDto { comprobante = new Comprobante { personaJuridica = new Cliente(), sucursal = new Sucursal() }, detalles = new List<DetalleFactura>() };

    protected override async Task OnInitializedAsync()
    {

       


        await ListarVentas();



    }


    protected async Task ListarVentas()
    {
        ventas = await http.GetJsonAsync<List<FacturaDto>>($"/api/Comprobante/ListarVentasTarjeta/{fechaDesde.ToString("dd-MM-yyyy")}/{fechaHasta.ToString("dd-MM-yyyy")}");
        if (ventas.Count > 0)
        {
            venta = ventas.Last();
            cadenaBusqueda = Convert.ToString(venta.comprobante.codigo);
        }
        else
        {
            venta = new FacturaDto { comprobante = new Comprobante { personaJuridica = new Cliente(), sucursal = new Sucursal() }, detalles = new List<DetalleFactura>() };
            cadenaBusqueda = "";

        }
        ventasBuscadas = ventas;

    }



    protected async Task BuscarVenta(string codigo)
    {
        FacturaDto ventaEncontrada = null;
        try
        {
            ventaEncontrada = ventas.Where(x => x.comprobante.codigo == codigo).First();

        }
        catch (Exception)
        {

        }

        if (ventaEncontrada != null)
        {
            venta = ventaEncontrada;

        }
        else
        {
            cadenaBusqueda = Convert.ToString(venta.comprobante.codigo);
            await Alerta("top-end", "error", "Venta inexistente");

        }

    }




    protected void FiltrarVenta(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (cadenafiltroBusqueda != "" && cadenafiltroBusqueda != string.Empty)
            {
                try
                {
                    if (criterioBusqueda == "Codigo")
                    {
                        ventasBuscadas = ventas.Where(x => x.comprobante.codigo.ToString().ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }
                    if (criterioBusqueda == "Razon Social")
                    {
                        ventasBuscadas = ventas.Where(x => x.comprobante.personaJuridica.razonSocial.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }

                }
                catch (Exception)
                {


                }

            }
            else { ventasBuscadas = ventas; }
        }
    }


    public async Task Alerta(string posicion = "top-end", string icono = "success", string mensaje = "Se creó el producto con éxito")
    {
        await js.InvokeAsync<object>("alerta", posicion, icono, mensaje);
    }

    public async Task ModalToggle()
    {
        await js.InvokeAsync<object>("ModalToggle");
    }



}


