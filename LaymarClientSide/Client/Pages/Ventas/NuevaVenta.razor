@using LaymarClientSide.Shared.Entidades
@inject HttpClient http
@page  "/nuevaVenta"
@inject IJSRuntime js
@attribute [Authorize(Roles = "Ventas, Admin")]
@using LaymarClientSide.Shared.Dtos
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager uriHelper


    <AuthorizeView Context="_context">
        <Authorized>
            @if (!ExisteCajaDiariaBandera)
            {
                uriHelper.NavigateTo("/caja");

            }
            else
            {
                //FORMULARIO


                <div class="bg-light mt-2">

                    <fieldset id="FieldSetFormulario" class="border border-solid rounded p-0 m-0">
                        @*DATOS  DEL COMPROBANTE*@

                        <div class="bg-light">
                            <div class="row 2 mx-0 mb-2 border-top border-solid bg-dark text-white px-4 pt-3"><h3><strong>DATOS DE LA VENTA</strong></h3></div>

                            <div class="justify-content-end d-flex row col-md-12 mt-4 mx-0 form-inline">
                                <h5 class="col-md-9">

                                    <span class="badge badge-light pl-4">
                                        <strong>CLIENTE:</strong>
                                    </span>
                                    <input style="height:1.8rem;" class="col-md-3 form-control" type="number" placeholder="Código Cliente" @bind-value="@busquedaCliente" @bind-value:event="oninput" @onkeypress="@(async (KeyboardEventArgs e) => { if (e.Key == "Enter") { AccionModal = ""; await buscarCliente(); clientesBuscados = clientes; } })" @onkeypress:stopPropagation />
                                    @if (clientes.Count() > 0)
                                    {
                                        <button class="btn" @onclick="@(async () => { AccionModal = "cliente"; await ModalToggle(); })"><i class="fas fa-search"></i></button>
                                    }
                                    else
                                    {
                                        //class="spinner-border"
                                        <span class="badge badge-light">Buscando clientes...</span>
                                        <span class="spinner-border"></span>
                                        //badge badge-light
                                    }
                                </h5>

                                <h5 class="col-md-3">
                                    <span class="badge badge-light">
                                        <strong>FECHA: </strong>
                                    </span>
                                    <strong>
                                        <span class="badge badge-light">
                                            @DateTime.Now.AddHours(-3).ToString("dd/MM/yyyy")
                                        </span>
                                    </strong>
                                </h5>
                            </div>

                            <div class="row col-md-12 form-inline mx-0 ">


                                <h5 class=" col-md-9 ">
                                    <span class="badge badge-light pl-4">
                                        <strong>

                                            RAZON SOCIAL:
                                        </strong>

                                    </span>
                                    <span class="badge badge-info text-left">
                                        @venta.comprobante.personaJuridica.razonSocial
                                    </span>

                                </h5>

                                <h5 class="col-md-3 ">

                                    <span class="badge badge-light ">
                                        <strong>SUCURSAL:</strong>
                                    </span>
                                    <strong>
                                        <span class="badge badge-info ">
                                            @VariablesGlobales.sucursal.nombreSucursal
                                        </span>
                                    </strong>

                                </h5>

                            </div>

                            <div class="justify-content-end d-flex row col-md-12 mx-0">
                                <AuthorizeView Roles="Admin">
                                    <Authorized>
                                        <div class="input-group mb-3 col-md-3">
                                            <div class="input-group-prepend input-group-sm">
                                                <span class="input-group-text" id="basic-addon1">Usuario</span>
                                            </div>
                                            <select class="form-control" @onchange="(async (ChangeEventArgs e) => { user = users.Where(x => x.id == e.Value.ToString()).First(); })">

                                                <option disabled>
                                                    Selecciona un usuario
                                                </option>
                                                @foreach (UserInfo _user in users)
                                                {
                                                    @if (user.id == _user.id)
                                                    {
                                                        <option selected value="@_user.id">@_user.username</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@_user.id">@_user.username</option>

                                                    }
                                                }
                                            </select>
                                        </div>
                                    </Authorized>
                                    <NotAuthorized>
                                        <h5 class="mt-2 col-md-3">
                                            <span class="badge badge-light">
                                                <strong>VENDEDOR: </strong>
                                            </span>
                                            <strong>
                                                <span class="badge badge-info">
                                                    @_context.User.Identity.Name
                                                </span>
                                            </strong>

                                        </h5>
                                    </NotAuthorized>
                                </AuthorizeView>

                            </div>

                            <div class="row 2 mx-0 bg-dark mt-4 rounded text-white py-2 px-4">
                                <div class="col-md-4">
                                    <h5 class="mt-2">
                                        <i class="fas fa-shopping-cart mr-1 text-info"></i>
                                        <strong>
                                            ARTICULOS
                                        </strong>
                                        <span class="badge badge-info ml-1">@venta.detalles.Count()</span>
                                    </h5>
                                </div>

                                <div class="col-md-8 d-flex justify-content-end">
                                    @if (venta.detalles.Count() < 50 && venta.comprobante.personaJuridica.PersonaJuridicaId != 0)
                                    {

                                        <button class="btn btn-info" @onclick="@(() => { venta.detalles.Add(new DetalleFactura { producto = new Producto() }); })"><i class="fas fa-plus-circle"></i></button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-dark disabled" disabled><i class="fas fa-plus-circle"></i></button>

                                    }
                                </div>
                            </div>
                        </div>
                        <table class="row col-md-12 mx-0 px-0 table px-1  table-sm mt-2 table-responsive-sm table-bordered table-hover">
                            <thead class="bg-light col-md-12 mx-0 px-0 ">
                                <tr class="col-md-12 row mx-0 px-0 text-center d-flex justify-content-center bg-info text-white " style="height:2.5rem">


                                    <th class="col-md-2" style="height:2.5rem">CODIGO</th>
                                    <th class="col-md-5" style="height:2.5rem">DESCRIPCION TALLE COLOR  MARCA</th>

                                    <th class="col-md-1" style="height:2.5rem">CANTIDAD</th>
                                    <th class="col-md-1" style="height:2.5rem">P/UNIDAD</th>
                                    <th class="col-md-1" style="height:2.5rem">DESC.</th>
                                    <th class="col-md-1" style="height:2.5rem">IMPORTE</th>
                                    <th class="col-md-1" style="height:2.5rem">ACCIONES</th>

                                </tr>
                            </thead>
                            <tbody class="col-md-12 mx-0 px-0">
                                @foreach (DetalleFactura detalleFactura in venta.detalles)
                                {
                                    <tr class="col-md-12 row mx-0 px-0 " style="height:2.5rem">
                                        <td class="col-md-2 form-inline text-center" style="height:2.5rem; padding:2px 8px 2px 8px">
                                            <input type="text" autofocus name="cod" class=" form-control col-md-8" style="height:1.8rem;" @bind-value="@detalleFactura.cadenaBusquedaProducto" @bind-value:event="oninput" @onkeypress="@(async (KeyboardEventArgs e) => { if (e.Key == "Enter") { AccionModal = ""; await buscarProducto(detalleFactura); } })" />
                                            <button class="btn col-md-1" @onclick="@((async () => { detalleActual = detalleFactura; await ModalToggle(); AccionModal = "producto"; productosBuscados = productos; }))">
                                                <i class="fas fa-search"></i>
                                            </button>

                                        </td>

                                        <td class="col-md-5 text-center " style="height:2.5rem; padding:2px 8px 2px 8px">
                                            <h5 class="mt-1">

                                                <span class="badge badge-light text-center">@detalleFactura.producto.nombre</span>
                                                <span class="badge badge-light text-center">@detalleFactura.producto.talle</span>

                                                <span class="badge badge-light text-center"> @detalleFactura.producto.color </span>
                                                <span class="badge badge-light text-center"> @detalleFactura.producto.marca </span>
                                            </h5>

                                        </td>



                                        <td class="col-md-1" style="height:2.5rem; padding:2px 8px 2px 8px">
                                            <input type="number" class="form-control col-md-12" @bind="@detalleFactura.cantidad" style="height:1.8rem;" />
                                        </td>
                                        <td class="col-md-1 text-center " style="height:2.5rem; padding:2px 8px 2px 8px">




                                            <h5>
                                                <span class="badge badge-light text-center">

                                                    $@(Math.Floor(detalleFactura.producto.precioUnitario * (detalleFactura.producto.porcentajeRentabilidad / 100 + 1)))
                                                </span>
                                            </h5>



                                        </td>
                                        <td class="col-md-1" style="height:2.5rem; padding:2px 8px 2px 8px">
                                            <AuthorizeView Roles="Admin" Context="_context2">
                                                <Authorized>
                                                    <input class="form-control col-md-12" type="number" step="0.01" @bind="@detalleFactura.bonificacion" style="height:1.8rem;" />

                                                </Authorized>
                                                <NotAuthorized>
                                                    <input class="form-control col-md-12 disabled" disabled type="number" step="0.01" @bind="@detalleFactura.bonificacion" style="height:1.8rem;" />

                                                </NotAuthorized>
                                            </AuthorizeView>
                                        </td>
                                        <td class="col-md-1 text-center" style="height:2.5rem; padding:2px 8px 2px 8px">
                                            <h5>
                                                <span class="badge badge-light text-center">
                                                    $@((Math.Floor(detalleFactura.producto.precioUnitario * (detalleFactura.producto.porcentajeRentabilidad / 100 + 1)) - detalleFactura.bonificacion) * detalleFactura.cantidad)
                                                </span>
                                            </h5>
                                        </td>
                                        <td class="col-md-1 d-flex justify-content-center" style="height:2.5rem; padding:2px 8px 2px 8px">
                                            <button class="btn text-danger  border border-solid rounded" title="Eliminar" @onclick="(() => venta.detalles.Remove(detalleFactura))" @onkeypress="@(async (KeyboardEventArgs e) => { Console.WriteLine(e.Key); if (e.Key == "Tab") { if (venta.detalles.Last() == detalleFactura) { venta.detalles.Add(new DetalleFactura { producto = new Producto() }); } } })"><i class="far fa-trash-alt text-danger"></i></button>
                                        </td>

                                    </tr>
                                }
                            </tbody>
                        </table>
                        @*RESUMEN*@
                        <div class="row col-md-12 mx-0 my-3 px-0">
                            <div class="row 2 col-md-12 mx-0 bg-dark mt-1 rounded text-white mb-4 px-0">
                                <h5 class="mt-2 pl-4">
                                    <strong><i class="far fa-file-alt text-info mr-1"></i>RESUMEN</strong>
                                </h5>
                            </div>

                            <div class="col-md-12 row mx-0 form-inline">
                                <h5 class="col-md-12 row mx-0">
                                    <span class="badge badge-light text-left col-md-6">
                                        <strong>SUBTOTAL: $@venta.detalles.Sum(x => x.cantidad * (Math.Floor(x.producto.precioUnitario * (x.producto.porcentajeRentabilidad / 100 + 1)) - x.bonificacion))</strong>
                                    </span>

                                    <span class="badge badge-light text-left col-md-6 d-flex justify-content-end">
                                        <strong class="mt-1"> <i class="fas fa-money-bill text-success"></i>EFECTIVO: $</strong>
                                        <input type="number" placeholder="Monto con efecitvo" class="ml-1 col-md-4 form-control" style="height:1.8rem;" @bind="@venta.comprobante.efectivo" />

                                    </span>
                                </h5>
                            </div>

                            <div class="col-md-12 row mx-0 mx-0 ">


                                <h5 class="col-md-12 row mx-0 form-inline">
                                    <span class="badge badge-light text-left col-md-6">
                                        <strong class="mt-1"> BONIFICACION: $</strong>

                                        <AuthorizeView Roles="Admin" Context="_context2">
                                            <Authorized>
                                                <input type="number" placeholder="Descuento" class="ml-1 col-md-4 form-control" style="height:1.8rem;" @bind-value="@venta.comprobante.bonificacion" />

                                            </Authorized>
                                            <NotAuthorized>
                                                <input type="number" placeholder="Descuento" class="ml-1 col-md-4 form-control disabled" disabled style="height:1.8rem;" @bind-value="@venta.comprobante.bonificacion" />

                                            </NotAuthorized>
                                        </AuthorizeView>

                                    </span>
                                    <span class="badge badge-light text-left col-md-6 d-flex justify-content-end">
                                        <strong class="mt-1">
                                            <i class="fas fa-credit-card text-info"></i>
                                            TARJETA: $
                                        </strong>
                                        <input type="number" placeholder="Monto con tarjeta" class="ml-1 col-md-4 form-control" style="height:1.8rem;" @bind-value="@venta.comprobante.tarjeta" />

                                    </span>
                                </h5>
                            </div>


                            <div class="col-md-12 row mx-0">
                                <h5 class="col-md-12 row mx-0">

                                    <span class="badge badge-dark text-left col-md-6">
                                        <strong>TOTAL VENTA: $@(venta.detalles.Sum(x => x.cantidad * (Math.Floor(x.producto.precioUnitario * (x.producto.porcentajeRentabilidad / 100 + 1)) - x.bonificacion)) - venta.comprobante.bonificacion)</strong>
                                    </span>

                                    <span class="badge badge-dark text-left col-md-6 d-flex justify-content-end">
                                        <strong>TOTAL PAGO: $@(venta.comprobante.tarjeta + venta.comprobante.efectivo)</strong>
                                    </span>
                                </h5>
                            </div>
                        </div>

                    </fieldset>




                    @*Boton Guardar*@
                    <div class="d-flex justify-content-center row col-md-12 mx-0 px-0 mt-2">

                        @if (AccionSobreComprobante == "Crear" || AccionSobreComprobante == "Editar")
                        {
                            <button @onclick="GuardarVenta" class="btn btn-success col-md-12"><i class="fas fa-save mr-1"></i> Guardar Venta</button>
                        }
                        else
                        {

                            <button @onclick="GuardarVenta" class="btn btn-success col-md-12" ><i class="fas fa-save mr-1"></i> Guardar Venta</button>

                        }
                    </div>



                </div>

                //MODAL
                <div class="modal p-0 fade" id="modal" data-backdrop="static" tabindex="-1" role="dialog">
                    <div class="modal-dialog  modal-lg rounded border border-solid" role="document">
                        <div class="modal-content">
                            <div class="modal-header bg-dark text-white">
                                <h5 class="modal-title">@((AccionModal == "producto") ? "PRODUCTOS" : "CLIENTES")</h5>
                                <button type="button" class="close" data-dimdiss="modal" aria-label="Close" @onclick="@(async () => { AccionModal = ""; await ModalToggle(); })">
                                    <span class="text-danger" aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body p-2 m-1" data-spy="scroll">
                                @if (AccionModal == "producto")
                                {
                                    <div class="input-group mb-3">
                                        <div class="input-group-prepend">
                                            <button type="button" class="btn btn-outline-secondary">@(criterioBusqueda == String.Empty ? "Nombre" : criterioBusqueda) </button>
                                            <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                <span class="sr-only">Toggle Dropdown</span>
                                            </button>
                                            <div class="dropdown-menu">
                                                <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Codigo")">Codigo</a>
                                                <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Nombre")">Nombre</a>
                                                <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Proveedor")">Proveedor</a>

                                            </div>
                                        </div>
                                        <input type="text" class="form-control" @bind-value="@cadenafiltroBusqueda" @bind-value:event="oninput" @onkeypress="@((KeyboardEventArgs e) => { FiltrarProducto(e); })">

                                        <div>

                                        </div>

                                        <table class="table table-striped mt-3 table-sm">
                                            <thead class="bg-dark text-white">

                                                <tr>
                                                    <th>Código</th>
                                                    <th>Nombre</th>
                                                    <th>Proveedor</th>

                                                    <th>Marca</th>
                                                    <th>Talle</th>
                                                    <th>Color</th>
                                                    <th>Acciones</th>

                                                </tr>
                                            </thead>
                                            <tbody>
                                                @if (productos.Count > 0)
                                                {
                                                    @foreach (Producto producto in productosBuscados)
                                                    {
                                                        <tr>
                                                            <td>@producto.ProductoId</td>
                                                            <td>@producto.nombre</td>
                                                            <td>@producto.proveedor.razonSocial</td>

                                                            <td>@producto.marca</td>
                                                            <td>@producto.talle</td>
                                                            <td>@producto.color</td>

                                                            <td><button class="btn" @onclick="@(async () => { detalleActual.producto = producto; AccionModal = ""; await ModalToggle(); cadenaBusqueda = Convert.ToString(producto.ProductoId); })"><i class="far fa-eye text-primary"></i></button></td>
                                                        </tr>
                                                    }

                                                }

                                            </tbody>
                                        </table>
                                    </div>
                                }
                                else if (AccionModal == "cliente")
                                {
                                    <div class="input-group mb-3">
                                        <div class="input-group-prepend">
                                            <button type="button" class="btn btn-outline-secondary">@(criterioBusqueda == String.Empty ? "Razon Social" : criterioBusqueda) </button>
                                            <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                <span class="sr-only">Toggle Dropdown</span>
                                            </button>
                                            <div class="dropdown-menu">

                                                <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Razon Social")">Razon Social</a>
                                                <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Codigo")">Codigo</a>

                                            </div>
                                        </div>
                                        <input type="text" class="form-control" @bind-value="@cadenafiltroBusqueda" @bind-value:event="oninput" @onkeypress="@((KeyboardEventArgs e) => { FiltrarCliente(e); })">

                                        <div>

                                        </div>

                                        <table class="table table-striped mt-3 table-sm">
                                            <thead class="bg-dark text-white">

                                                <tr>
                                                    <th>Código</th>
                                                    <th>Razón Social</th>
                                                    <th>Accciones</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @if (clientes.Count > 0)
                                                {
                                                    @foreach (Cliente cliente in clientesBuscados)
                                                    {
                                                        <tr>
                                                            <td>@cliente.PersonaJuridicaId</td>
                                                            <td>@cliente.razonSocial</td>
                                                            <td><button class="btn" @onclick="@(async () => { busquedaCliente = cliente.PersonaJuridicaId; venta.comprobante.personaJuridica = cliente; AccionModal = ""; await ModalToggle(); })"><i class="far fa-eye text-primary"></i></button></td>
                                                        </tr>
                                                    }

                                                }

                                            </tbody>
                                        </table>
                                    </div>
                                }
                            </div>

                        </div>
                    </div>
                </div>
            }

        </Authorized>
    </AuthorizeView>

    @code {
        public bool valido { get; set; } = true;
        public string cadenaBusqueda { get; set; }
        public string cadenafiltroBusqueda { get; set; } = String.Empty;
        public string criterioBusqueda { get; set; } = "Codigo";
        public string AccionSobreComprobante { get; set; } = "Detalles";
        public string AccionModal { get; set; } = "";
        public int busquedaCliente { get; set; }
        public bool ExisteCajaDiariaBandera { get; set; } = true;

        public List<Producto> productos { get; set; } = new List<Producto>();
        public List<Producto> productosBuscados { get; set; } = new List<Producto>();
        public List<UserInfo> users { get; set; } = new List<UserInfo>();
        public UserInfo user { get; set; }

        public Cliente cliente { get; set; } = new Cliente();
        public List<Cliente> clientes { get; set; } = new List<Cliente>();
        public List<Cliente> clientesBuscados { get; set; } = new List<Cliente>();

        public FacturaDto venta { get; set; } = new FacturaDto
        {
            comprobante = new Comprobante { personaJuridica = new Cliente() },
            detalles = new List<DetalleFactura>()
        };

        public DetalleFactura detalleActual { get; set; } = new DetalleFactura();

        protected override async Task OnInitializedAsync()
        {


            await ExisteCajaDiaria();
            await ListarUsuarios();

            await ListarProductos();
            await ListarClientes();
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            user = users.Where(x => x.username == authState.User.Identity.Name).First();

        }
        protected async Task ExisteCajaDiaria()
        {
            ExisteCajaDiariaBandera = await http.PostJsonAsync<bool>($"/api/Caja/ExisteCajaDia", VariablesGlobales.sucursal);

        }

        protected async Task ListarUsuarios()
        {
            users = await http.GetJsonAsync<List<UserInfo>>("/api/Cuentas/Usuarios");

        }
        protected async Task ListarClientes()
        {
            clientes = await http.GetJsonAsync<List<Cliente>>("/api/Cliente/Listar");
            clientes = clientes.Where(x => x.fechaBaja == null).ToList();
            clientesBuscados = clientes;
        }
        protected async Task ListarProductos()
        {
            productos = await http.GetJsonAsync<List<Producto>>("/api/Producto/Listar");
            productos = productos.Where(x => x.fechaBaja == null).ToList();
        }



        protected async Task GuardarVenta()
        {
            
            bool bandera = false;

            foreach (DetalleFactura detalle in venta.detalles)
            {
                @if (detalle.cantidad == 0 || detalle.producto.ProductoId == 0)
                {
                    bandera = true;
                }
            }
            venta.comprobante.importe = venta.detalles.Sum(x => x.cantidad * (Math.Floor(x.producto.precioUnitario * (x.producto.porcentajeRentabilidad / 100 + 1)) - x.bonificacion)) - venta.comprobante.bonificacion;

            if (venta.comprobante.personaJuridica == null || venta.comprobante.personaJuridica.PersonaJuridicaId == 0)
            {
                await Alerta("top-end", "error", "Tienes que seleccionar un cliente");

            }
            else if (venta.detalles.Count == 0)
            {
                await Alerta("top-end", "error", "Tienes que cargar al menos un artículo");

            }
            else if (bandera)
            {
                await Alerta("top-end", "error", "No pueden haber renglones sin productos o sin cantidad");

            }
            else if (venta.comprobante.importe != (venta.comprobante.efectivo + venta.comprobante.tarjeta))
            {
                await Alerta("top-end", "error", "El total de la venta y el total del pago tienen que coincidir");
            }
            else
            {
                try
                {
                    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                    venta.comprobante.UserName = user.username;

                    venta.comprobante.sucursal = VariablesGlobales.sucursal;
                    await http.PostJsonAsync("/api/Comprobante/CrearVenta", venta);
                    await Alerta("top-end", "success", "Se creó la venta con éxito");

                    //await JSRuntime.InvokeVoidAsync("setAttribute", "btn_guardarventa", "disabled", "false");
                    venta = new FacturaDto
                    {
                        comprobante = new Comprobante { personaJuridica = new Cliente() },
                        detalles = new List<DetalleFactura>()
                    };

                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                    await Alerta("top-end", "error", "Ocurrio un error");
                }
                
            }
            

        }
        protected async Task buscarProducto(DetalleFactura detalle)
        {

            try
            {

                detalle.producto = productos.Where(x => x.ProductoId == Convert.ToInt32(detalle.cadenaBusquedaProducto)).First();
            }
            catch (Exception)
            {
                await Alerta("top-end", "error", "Producto Inexistente");
            }

        }

        protected async Task buscarCliente()
        {
            try
            {
                venta.comprobante.personaJuridica = clientes.Where(x => x.PersonaJuridicaId == busquedaCliente).First();

            }
            catch (Exception)
            {

                await Alerta("top-end", "error", "Cliente Inexistente");
            }


        }


        protected void ChangePrecio(DetalleFactura detalle)
        {

            detalle.subtotal = Math.Floor(detalle.producto.precioUnitario * (detalle.producto.porcentajeRentabilidad / 100 + 1)) - detalle.bonificacion;
        }
        protected async Task CrearComprobante()
        {
            AccionSobreComprobante = "Crear";
            venta = new FacturaDto();

            valido = false;
            await HabilitarFormulario();

        }


        protected void FiltrarProducto(KeyboardEventArgs e)
        {
            Console.WriteLine(cadenafiltroBusqueda + ", " + criterioBusqueda);
            if (e.Key == "Enter")
            {
                if (cadenafiltroBusqueda != "" && cadenafiltroBusqueda != string.Empty)
                {
                    try
                    {
                        if (criterioBusqueda == "Codigo")
                        {
                            productosBuscados = productos.Where(x => x.ProductoId.ToString().ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                        }
                        else if (criterioBusqueda == "Nombre")
                        {
                            productosBuscados = productos.Where(x => x.nombre.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                        }

                        else if (criterioBusqueda == "Proveedor")
                        {
                            productosBuscados = productos.Where(x => x.proveedor.razonSocial.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                        }

                    }
                    catch (Exception ex)
                    {

                        Console.WriteLine(ex.Message);
                    }

                }
                else { productosBuscados = productos; }
            }
        }
        protected void FiltrarCliente(KeyboardEventArgs e)
        {
            if (e.Key == "Enter")
            {
                if (cadenafiltroBusqueda != "" && cadenafiltroBusqueda != string.Empty)
                {
                    if (criterioBusqueda == "Razon Social")
                    {
                        clientesBuscados = clientes.Where(x => x.razonSocial.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }

                    if (criterioBusqueda == "Codigo")
                    {
                        clientesBuscados = clientes.Where(x => x.PersonaJuridicaId.ToString().Contains(cadenafiltroBusqueda)).ToList();
                    }
                }
                else { clientesBuscados = clientes; }
            }
        }

        public async Task HabilitarFormulario()
        {
            await js.InvokeAsync<object>("EnabledFieldFormulario");
        }
        public async Task DeshabilitarFormulario()
        {
            await js.InvokeAsync<object>("DisabledFieldFormulario");
        }

        public async Task Alerta(string posicion = "top-end", string icono = "success", string mensaje = "Se creó el comprobante con éxito")
        {
            await js.InvokeAsync<object>("alerta", posicion, icono, mensaje);
        }

        public async Task ModalToggle()
        {
            await js.InvokeAsync<object>("ModalToggle");
        }
    }
