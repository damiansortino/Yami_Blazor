@using LaymarClientSide.Shared.Entidades
@inject HttpClient http
@page  "/cliente"
@inject IJSRuntime js
@attribute [Authorize(Roles = "Ventas, Admin")]

@inject NavigationManager uriHelper

<AuthorizeView></AuthorizeView>
<h2 class="mt-2">
    <strong>
        <span class="badge badge-light">
            <strong><i class="fas fa-users text-info mr-2"></i> CLIENTES</strong>
        </span>
    </strong>
</h2><div class="botonera row col-md-12 mx-0 border bg-light border-solid rounded pt-2">
    @*Boton Crear*@
    <button class="btn text-primary btn-sm  mb-3 mr-2 border border-solid rounded" title="Crear" @onclick="@(async () => { await CrearCliente(); await HabilitarFormulario(); })"><i class="fas fa-plus-circle"></i></button>
    @* Boton Editar*@
    @if (valido)
    {
        <button class="btn text-warning btn-sm  mb-3 mr-2 text-white border border-solid rounded " title="Editar" @onclick="@(async () => { AccionSobreCliente = "Editar"; await HabilitarFormulario(); })"><i class="fas fa-edit"></i></button>
    }
    else
    {
        <button class="btn text-warning btn-sm  mb-3 mr-2 text-white border border-solid rounded disbled" disabled title="Editar" @onclick="@(async () => { AccionSobreCliente = "Editar"; await HabilitarFormulario(); })"><i class="fas fa-edit"></i></button>

    }
    @*Boton Anular*@
    @if (valido)
    {
        <button class="btn text-danger  mb-3 btn-sm border border-solid rounded" title="Anular" @onclick="@(async () => { await ModalConfirmToggle(); })"><i class="fas fa-ban"></i></button> @*Boton Anular*@

    }
    else
    {
        <button class="btn text-danger  mb-3 btn-sm border border-solid rounded disabled" disabled title="Anular" @onclick="@(async () => { await ModalConfirmToggle(); })"><i class="fas fa-ban"></i></button> @*Boton Anular*@

    }

    @*texto Buscar*@

    <div class="input-group mb-3 col-md-3">
        <div class="input-group-prepend input-group-sm" @onclick="@( async () => { await BuscarCliente(cadenaBusqueda); await DeshabilitarFormulario(); })">
            <span class="input-group-text" id="basic-addon1">Código</span>
        </div>
        <input type="text" class="form-control" @bind-value="@cadenaBusqueda" @bind-value:event="oninput" @onkeypress="@(async (KeyboardEventArgs e) => { if (e.Key == "Enter") { await BuscarCliente(cadenaBusqueda); } })" />


    </div>
    @*Boton buscar*@
    <button class="btn text-primary  mb-3 btn-sm border mr-2 border-solid rounded" title="Anular" @onclick="(async () => { clientesBuscados = clientes; await ModalToggle(); })"><i class="fas fa-search m-0 p-0"></i></button> @*Boton Anular*@

    @if (clientes.Count > 0)
    {


        @*Boton Anterior*@
        @if (clientes.First() != cliente)
        {
            <button class="btn mb-3 btn-sm border border-solid rounded mr-2" @onclick="@(async () => { cadenaBusqueda = Convert.ToString(Convert.ToInt32(cadenaBusqueda) - 1); await BuscarCliente(cadenaBusqueda); await DeshabilitarFormulario();})">
                <i class="fas fa-backward"></i>
            </button>
        }
        else
        {
            <button class="btn mb-3 btn-sm border border-solid rounded mr-2 disabled" disabled @onclick="@(async () => { cadenaBusqueda = Convert.ToString(Convert.ToInt32(cadenaBusqueda) - 1); await BuscarCliente(cadenaBusqueda); })">
                <i class="fas fa-backward"></i>
            </button>
        }
        @*Boton Siguiente*@

        @if (clientes.Last() != cliente)
        {
            <button class="btn mb-3 btn-sm border border-solid rounded mr-2" @onclick="@(async () => { cadenaBusqueda = Convert.ToString(Convert.ToInt32(cadenaBusqueda) + 1); await BuscarCliente(cadenaBusqueda); await DeshabilitarFormulario(); })">
                <i class="fas fa-forward"></i>
            </button>

        }
        else
        {
            <button class="btn mb-3 btn-sm border border-solid rounded mr-2 disabled" disabled @onclick="@(async () => { cadenaBusqueda = Convert.ToString(Convert.ToInt32(cadenaBusqueda) + 1); await BuscarCliente(cadenaBusqueda); await DeshabilitarFormulario(); })">
                <i class="fas fa-forward"></i>
            </button>
        }

    }


</div>

@*FORMULARIO*@
<div class="row col-md-12 mx-0 bg-dark mt-1 rounded"><h4 class="mt-2 text-white py-1"><strong>@AccionSobreCliente.ToUpper()</strong></h4></div>

<div class="bg-light mt-2">
    <EditForm Model=@cliente OnValidSubmit="@GuardarCliente">
        <ObjectGraphDataAnnotationsValidator />

        <fieldset id="FieldSetFormulario" disabled class="@(cliente.fechaBaja != null ? "border border-danger rounded":"border border-solid rounded")">
            @if (cliente.fechaBaja != null)
            {
                <div class="row col-md-12 mx-0 mt-3"><h5 class="ml-2"><strong class="text-danger">Anulado @cliente.fechaBaja</strong></h5></div>
            }
            <div class="input-group mb-2 col-md-12 mt-2">
                <div class="col-md-4">
                    <div class="input-group input-group-sm mb-1 mt-1">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroup-sizing-sm">Código</span>
                        </div>
                        <input type="text" class="form-control disabled" disabled @bind-value="@cliente.ClienteId">

                    </div>


                </div>
            </div>
            @*DATOS  DEL CLIENTE*@
            <div class="row col-md-12 mx-0 mb-2 border-top border-solid text-primary pt-3"><strong>DATOS DEL CLIENTE</strong></div>

            <div class="row col-md-12 mx-0">

                <div class="input-group input-group-sm mb-3 col-md-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="inputGroup-sizing-sm">Razón Social</span>
                    </div>
                    <input type="text" class="form-control " @bind-value="@cliente.razonSocial">
                    <ValidationMessage For="@(() => cliente.razonSocial)" />

                </div>
                <div class="input-group input-group-sm mb-3 col-md-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="inputGroup-sizing-sm">Cuit</span>
                    </div>
                    <input type="text" class="form-control disabled " @bind-value="@cliente.cuit">
                </div>



                <div class="input-group input-group-sm mb-3 col-md-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="inputGroup-sizing-sm">Nombre Fantasía</span>
                    </div>
                    <input type="text" class="form-control " @bind-value="@cliente.nombreFantasia">
                </div>
            </div>

            @*DATOS  DE CONTACTO*@
            <div class="row col-md-12 mx-0 mb-2 border-top border-solid text-primary pt-3"><strong>DATOS DE CONTACTO</strong></div>
            <div class="row col-md-12 mx-0">

                <div class="input-group input-group-sm mb-3 col-md-6">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="inputGroup-sizing-sm">Dirección 1</span>
                    </div>
                    <input type="text" class="form-control " @bind-value="@cliente.direccion1">
                </div>

                <div class="input-group input-group-sm mb-3 col-md-6">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="inputGroup-sizing-sm">Dirección 2</span>
                    </div>
                    <input type="text" class="form-control " @bind-value="@cliente.direccion2">
                </div>

                <div class="input-group input-group-sm mb-3 col-md-6">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="inputGroup-sizing-sm">Telefono 1</span>
                    </div>
                    <input type="text" class="form-control " @bind-value="@cliente.numeroTelefono1">
                </div>

                <div class="input-group input-group-sm mb-3 col-md-6">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="inputGroup-sizing-sm">Telefono 2</span>
                    </div>
                    <input type="text" class="form-control " @bind-value="@cliente.numeroTelefono2">
                </div>
            </div>


        </fieldset>
        @*Boton Guardar*@
        <div class="d-flex justify-content-center row col-md-12 mx-0 px-0 mt-2">

            @if (AccionSobreCliente == "Crear" || AccionSobreCliente == "Editar")
            {
                <button type="submit" class="btn btn-success col-md-12"><i class="fas fa-save mr-1"></i> Guardar</button>
            }
            else
            {

                <button type="submit" class="btn btn-success col-md-12 disabled" disabled><i class="fas fa-save mr-1"></i> Guardar</button>

            }
        </div>
    </EditForm>

    <div class="modal p-0 fade" id="modal" data-backdrop="static" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Buscar Cliente</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(async () => { await ModalToggle();  })">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body p-3 m-2" data-spy="scroll">
                    @*BODY *@
                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <button type="button" class="btn btn-outline-secondary">@(criterioBusqueda == String.Empty ? "Razon Social" : criterioBusqueda) </button>
                            <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <span class="sr-only">Toggle Dropdown</span>
                            </button>
                            <div class="dropdown-menu">

                                <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Razon Social")">Razon Social</a>
                                <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Codigo")">Codigo</a>
                                <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Cuit")">Cuit</a>

                            </div>
                        </div>
                        <input type="text" class="form-control" @bind-value="@cadenafiltroBusqueda" @bind-value:event="oninput" @onkeypress="@((KeyboardEventArgs e)=> {  FiltrarCliente(e); })">

                        <div>

                        </div>

                        <table class="table table-striped mt-3 table-sm">
                            <thead class="bg-dark text-white">

                                <tr>
                                    <th>Código</th>
                                    <th>Razón Social</th>
                                    <th>Cuit</th>
                                    <th>Accciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (clientes.Count > 0)
                                {
                                    @foreach (Cliente cliente in clientesBuscados)
                                    {
                                        <tr>
                                            <td>@cliente.ClienteId</td>
                                            <td>@cliente.razonSocial</td>
                                            <td>@cliente.cuit</td>
                                            <td><button class="btn" @onclick="@(async () => { await BuscarCliente(cliente.ClienteId); await ModalToggle(); cadenaBusqueda = cliente.ClienteId; })"><i class="far fa-eye text-primary"></i></button></td>
                                        </tr>
                                    }

                                }

                            </tbody>
                        </table>
                    </div>
                </div>

            </div>
        </div>
    </div>


</div>
<div class="modal p-0 fade" id="modalConfirm" data-backdrop="static" tabindex="-1" role="dialog">
    <div class="modal-dialog " role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">CONFIRMAR</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(async () => { await ModalConfirmToggle(); })">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body p-3 m-2" data-spy="scroll">
                @*BODY *@

                <p><strong>¿Desea anular este Cliente? Una vez anulado no podrá volver atrás.</strong></p>
                <div class="col-md-12 d-flex justify-content-center mt-4"> <button class="btn btn-success col-md-4" @onclick="@(async () => {await  AnularCliente(); await ModalConfirmToggle(); })">OK</button><button class="btn btn-light ml-2 col-md-4" @onclick="@ModalConfirmToggle">CANCELAR</button></div>
            </div>

        </div>
    </div>
</div>


@code {
    public bool valido { get; set; } = true;
    public string cadenaBusqueda { get; set; }
    public string cadenafiltroBusqueda { get; set; } = String.Empty;
    public string criterioBusqueda { get; set; } = "Razon Social";

    public string AccionSobreCliente { get; set; } = "Detalles";
    public Cliente cliente { get; set; } = new Cliente();
    public List<Cliente> clientes { get; set; } = new List<Cliente>();
    public List<Cliente> clientesBuscados { get; set; } = new List<Cliente>();



    protected override async Task OnInitializedAsync()
    {

        await ListarClientes();

    }
    protected async Task ListarClientes()
    {
        clientes = await http.GetJsonAsync<List<Cliente>>("/api/Cliente/Listar");
        if (clientes.Count > 0)
        {
            cliente = clientes.Last();
            cadenaBusqueda = cliente.ClienteId;
        }
        else
        {
            cliente = new Cliente();
        }
    }

    protected async Task BuscarCliente(string codigo)
    {
        Cliente clienteEncontrado = null;
        AccionSobreCliente = "Detalles";
        try
        {
            clienteEncontrado = clientes.Where(x => x.ClienteId == codigo).First();

        }
        catch (Exception)
        {

        }

        if (clienteEncontrado != null)
        {
            cliente = clienteEncontrado;
            if (cliente.fechaBaja != null)
            {
                valido = false;
            }
            else { valido = true; }
        }
        else
        {
            cadenaBusqueda = cliente.ClienteId;
            await Alerta("top-end", "error", "Cliente inexistente");

        }
        await DeshabilitarFormulario();

    }

    protected async Task GuardarCliente()
    {
        @if (AccionSobreCliente == "Crear")
        {
            await http.PostJsonAsync("/api/Cliente/Crear", cliente);
            await DeshabilitarFormulario();

            await Alerta("top-end", "success", "Se creó con éxito");
            cadenaBusqueda = cliente.ClienteId;

        }
        @if (AccionSobreCliente == "Editar")
        {

            await http.PutJsonAsync($"/api/Cliente/Editar/{cliente.PersonaJuridicaId}", cliente);
            await DeshabilitarFormulario();
            await Alerta("top-end", "success", "Se editó con éxito");

        }
        AccionSobreCliente = "Detalle";
        AccionSobreCliente = "Detalle";
        await ListarClientes();
    }

    protected async Task CrearCliente()
    {
        AccionSobreCliente = "Crear";
        cliente = new Cliente();
        if (clientes.Count > 0)
        {
            cliente.ClienteId = Convert.ToString(Convert.ToInt32(clientes.Last().ClienteId) + 1);

        }
        else
        {
            cliente.ClienteId = "1";

        }
        valido = false;
        await HabilitarFormulario();

    }
    protected async Task AnularCliente()
    {
        await http.DeleteAsync($"/api/Cliente/Anular/{cliente.PersonaJuridicaId}");
        await ListarClientes();
    }

    protected void FiltrarCliente(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (cadenafiltroBusqueda != "" && cadenafiltroBusqueda != string.Empty)
            {
                if (criterioBusqueda == "Razon Social")
                {
                    clientesBuscados = clientes.Where(x => x.razonSocial.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                }
                if (criterioBusqueda == "Cuit")
                {
                    clientesBuscados = clientes.Where(x => x.cuit.Contains(cadenafiltroBusqueda)).ToList();
                }
                if (criterioBusqueda == "Codigo")
                {
                    clientesBuscados = clientes.Where(x => x.ClienteId.Contains(cadenafiltroBusqueda)).ToList();
                }
            }
            else { clientesBuscados = clientes; }
        }
    }
    public async Task HabilitarFormulario()
    {
        await js.InvokeAsync<object>("EnabledFieldFormulario");
    }
    public async Task DeshabilitarFormulario()
    {
        await js.InvokeAsync<object>("DisabledFieldFormulario");
    }

    public async Task Alerta(string posicion = "top-end", string icono = "success", string mensaje = "Se creó el cliente con éxito")
    {
        await js.InvokeAsync<object>("alerta", posicion, icono, mensaje);
    }

    public async Task ModalToggle()
    {
        await js.InvokeAsync<object>("ModalToggle");
    }

    public async Task ModalConfirmToggle()
    {
        await js.InvokeAsync<object>("ModalConfirmToggle");
    }

}

