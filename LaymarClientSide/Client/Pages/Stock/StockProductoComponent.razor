@using LaymarClientSide.Shared.Entidades
@inject HttpClient http
@attribute [Authorize(Roles = "Stock, Admin")]
@using Microsoft.AspNetCore.Components.Authorization


@page  "/stockProducto"

@inject IJSRuntime js

<h2 class="mt-2">
    <strong>
        <span class="badge badge-light">
            <strong><i class="fas fa-cubes mr-1 text-info" style="font-size:1.3rem;"></i>STOCK POR PRODUCTO</strong>
        </span>
    </strong>
</h2>
<div class="botonera row col-md-12 mx-0 border bg-light border-solid rounded pt-2">


    @*texto Buscar*@

    <div class="input-group mb-3 col-md-3">
        <div class="input-group-prepend input-group-sm" @onclick="@( async () => { await BuscarProducto(Convert.ToInt32(cadenaBusqueda)); })">
            <span class="input-group-text" id="basic-addon1">Código</span>
        </div>
        <input type="text" class="form-control" @bind-value="@cadenaBusqueda" @bind-value:event="oninput" @onkeypress="@(async (KeyboardEventArgs e) => { if (e.Key == "Enter") { await BuscarProducto(Convert.ToInt32(cadenaBusqueda)); } })" />


    </div>
    @*Boton buscar*@
    <button class="btn text-primary  mb-3 btn-sm border mr-2 border-solid rounded" title="Anular" @onclick="(async () => { productosBuscados = productos; await ModalToggle(); })"><i class="fas fa-search m-0 p-0"></i></button> @*Boton Anular*@

    @if (productos.Count > 0)
    {


        @*Boton Anterior*@
        @if (productos.First() != producto)
        {
            <button class="btn mb-3 btn-sm border border-solid rounded mr-2" @onclick="@(async () => { cadenaBusqueda = Convert.ToString(Convert.ToInt32(cadenaBusqueda) - 1); await BuscarProducto(Convert.ToInt32(cadenaBusqueda)); })">
                <i class="fas fa-backward"></i>
            </button>
        }
        else
        {
            <button class="btn mb-3 btn-sm border border-solid rounded mr-2 disabled" disabled @onclick="@(async () => { cadenaBusqueda = Convert.ToString(Convert.ToInt32(cadenaBusqueda) - 1); await BuscarProducto(Convert.ToInt32(cadenaBusqueda)); })">
                <i class="fas fa-backward"></i>
            </button>
        }
        @*Boton Siguiente*@

        @if (productos.Last() != producto)
        {
            <button class="btn mb-3 btn-sm border border-solid rounded mr-2" @onclick="@(async () => { cadenaBusqueda = Convert.ToString(Convert.ToInt32(cadenaBusqueda) + 1); await BuscarProducto(Convert.ToInt32(cadenaBusqueda)); })">
                <i class="fas fa-forward"></i>
            </button>

        }
        else
        {
            <button class="btn mb-3 btn-sm border border-solid rounded mr-2 disabled" disabled @onclick="@(async () => { cadenaBusqueda = Convert.ToString(Convert.ToInt32(cadenaBusqueda) + 1); await BuscarProducto(Convert.ToInt32(cadenaBusqueda));  })">
                <i class="fas fa-forward"></i>
            </button>
        }

    }


</div>
<div class="row col-md-12 mx-0 mt-3">

    @if (producto.ProductoId != 0)
    {
        <div class="col-md-12 row mx-0  alert bg-dark text-white border border-solid rounded d-flex align-items-center">
            <h4>
                <strong>
                    <span class="badge badge-light">@producto.nombre.ToUpper() </span>
                    <span class="badge badge-light">@producto.talle </span>
                    <span class="badge badge-light">@producto.color </span>
                    <span class="badge badge-light">@producto.marca </span>

                </strong>
            </h4>
        </div>

        <div class="accordion row col-md-12" id="accordionExample">

            @foreach (Stock stock in stocks)
            {

                <div class="card row col-md-12 mx-0 px-0">
                    <div class="card-header bg-light my-0 py-2" id="headingOne">
                        <button class="btn d-flex align-items-center" type="button" data-toggle="collapse" data-target="#sucursal@(stock.sucursal.SucursalId)" aria-expanded="true" aria-controls="collapseOne">
                            <h3><strong><span class="badge badge-info"> @stock.sucursal.nombreSucursal.ToUpper()</span><span class=""> -</span> <span class="badge badge-info">@stock.cantidad</span> <span class="badge badge-light"> UNIDADES </span>  </strong></h3>
                        </button>
                    </div>
                    <div id="sucursal@(stock.sucursal.SucursalId)" class="collapse" aria-labelledby="headingOne" data-parent="#accordionExample">
                        <div class="card-body p-0">
                            <table class="table table-striped">
                                <thead class="bg-dark text-white">
                                    <tr>
                                        <th>Fecha</th>
                                        <th>Tipo</th>
                                        <th>Comprobante</th>

                                        <th>Entra</th>
                                        <th>Sale</th>
                                        <th>Cantidad</th>
                                    </tr>
                                </thead>

                                <tbody>

                                    @foreach (MovimientoStock movimientoStock in movimientoStocks.Where(x => x.StockId == stock.StockId).ToList())
                                    {

                                        <tr class="@(movimientoStock.fechaBaja != null? "text-danger":"")">
                                            <td>@movimientoStock.fechaAlta</td>
                                            <td>
                                                @(tipoMovimientoStocks.Where(x => x.TipoMovimientoStockId == movimientoStock.TipoMovimientoStockId).First().nombreTipoMovimientoStock)
                                            </td>
                                            <td>@(movimientoStock.comprobante != null ? movimientoStock.comprobante.codigo:"") <strong class="text-danger">@(movimientoStock.fechaBaja != null? " (ANULADO)":"")</strong> </td>

                                            <td><i class="@(movimientoStock.entra  ? "fas fa-check text-success" : "fas fa-times text-danger")"></i></td>
                                            <td><i class="@(movimientoStock.sale  ? "fas fa-check text-success" : "fas fa-times text-danger")"></i></td>
                                            <td>@movimientoStock.cantidad</td>


                                        </tr>


                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

            }
        </div>
        <div class="col-md-12 row mx-0  mt-3 alert bg-dark text-white"><h4><strong><i class="fas fa-cubes mr-1 text-info" style="font-size:1.3rem;"></i>TOTAL EN STOCK: @stocks.Sum(x => x.cantidad) UNIDADES</strong></h4></div>
    }
</div>
@*MODAL*@
<div class="modal p-0 fade" id="modal" data-backdrop="static" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Buscar Producto</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(async () => { await ModalToggle();  })">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body p-3 m-2" data-spy="scroll">
                @*BODY *@
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <button type="button" class="btn btn-outline-secondary">@(criterioBusqueda == String.Empty ? "Nombre" : criterioBusqueda) </button>
                        <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>
                        <div class="dropdown-menu">
                            <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Codigo")">Codigo</a>
                            <a class="dropdown-item" @onclick="@(() => criterioBusqueda = "Nombre")">Nombre</a>

                        </div>
                    </div>
                    <input type="text" class="form-control" @bind-value="@cadenafiltroBusqueda" @bind-value:event="oninput" @onkeypress="@((KeyboardEventArgs e)=> {  FiltrarProducto(e); })">

                    <div>

                    </div>

                    <table class="table table-striped mt-3 table-sm">
                        <thead class="bg-dark text-white">

                            <tr>
                                <th>Código</th>
                                <th>Nombre</th>
                                <th>Proveedor</th>

                                <th>Marca</th>
                                <th>Talle</th>
                                <th>Color</th>
                                <th>Acciones</th>

                            </tr>
                        </thead>
                        <tbody>
                            @if (productos.Count > 0)
                            {
                                @foreach (Producto producto in productosBuscados)
                                {
                                    <tr>
                                        <td>@producto.ProductoId</td>
                                        <td>@producto.nombre</td>
                                        <td>@producto.proveedor.razonSocial</td>

                                        <td>@producto.marca</td>
                                        <td>@producto.talle</td>
                                        <td>@producto.color</td>

                                        <td><button class="btn" @onclick="@(async () => { await BuscarProducto(producto.ProductoId); await ModalToggle(); cadenaBusqueda = Convert.ToString(producto.ProductoId); })"><i class="far fa-eye text-primary"></i></button></td>
                                    </tr>
                                }

                            }

                        </tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>
</div>





@code {
    public string cadenaBusqueda { get; set; }
    public string cadenafiltroBusqueda { get; set; } = String.Empty;
    public string criterioBusqueda { get; set; } = "Nombre";

    public Producto producto { get; set; } = new Producto();
    public List<Producto> productos { get; set; } = new List<Producto>();
    public List<Stock> stocks { get; set; } = new List<Stock>();
    public List<TipoMovimientoStock> tipoMovimientoStocks { get; set; } = new List<TipoMovimientoStock>();
    public List<Producto> productosBuscados { get; set; } = new List<Producto>();
    public List<MovimientoStock> movimientoStocks { get; set; } = new List<MovimientoStock>();


    protected override async Task OnInitializedAsync()
    {

        await ListarProductos();
        await ListarTipoMovimientoStock();
        if (productos.Count > 0)
        {
            cadenaBusqueda = Convert.ToString(producto.ProductoId);
        }

    }
    protected async Task ListarTipoMovimientoStock()
    {
        tipoMovimientoStocks = await http.GetJsonAsync<List<TipoMovimientoStock>>("/api/Stock/ListarTipoMovimientoStock");
    }

    protected async Task ListarProductos()
    {
        productos = await http.GetJsonAsync<List<Producto>>("/api/Producto/Listar");

    }

    protected async Task ListarStocks()
    {
        stocks = await http.GetJsonAsync<List<Stock>>("/api/Stock/Listar");

    }


    protected async Task BuscarProducto(int codigo)
    {
        Producto productoEncontrado = null;
        try
        {
            productoEncontrado = productos.Where(x => x.ProductoId == codigo).First();

        }
        catch (Exception)
        {

        }

        if (productoEncontrado != null)
        {
            producto = productoEncontrado;
            stocks = await http.GetJsonAsync<List<Stock>>($"/api/Stock/ListarPorProducto/{producto.ProductoId}");
            movimientoStocks = new List<MovimientoStock>();
            foreach (Stock stock in stocks)
            {
                movimientoStocks.AddRange(await http.GetJsonAsync<List<MovimientoStock>>($"/api/Stock/ListarMovimientoStock/{stock.StockId}"));
            }
        }
        else
        {
            cadenaBusqueda = Convert.ToString(producto.ProductoId);
            await Alerta("top-end", "error", "Producto inexistente");

        }

    }




    protected void FiltrarProducto(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (cadenafiltroBusqueda != "" && cadenafiltroBusqueda != string.Empty)
            {
                try
                {
                    if (criterioBusqueda == "Codigo")
                    {
                        productosBuscados = productos.Where(x => x.ProductoId.ToString().ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }
                    if (criterioBusqueda == "Nombre")
                    {
                        productosBuscados = productos.Where(x => x.nombre.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }
                    if (criterioBusqueda == "Marca")
                    {
                        productosBuscados = productos.Where(x => x.marca.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }
                    if (criterioBusqueda == "Proveedor")
                    {
                        productosBuscados = productos.Where(x => x.proveedor.razonSocial.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }
                    if (criterioBusqueda == "Talle")
                    {
                        productosBuscados = productos.Where(x => x.talle.Contains(cadenafiltroBusqueda)).ToList();
                    }
                    if (criterioBusqueda == "Color")
                    {
                        productosBuscados = productos.Where(x => x.color.Contains(cadenafiltroBusqueda)).ToList();
                    }
                }
                catch (Exception)
                {


                }

            }
            else { productosBuscados = productos; }
        }
    }


    public async Task Alerta(string posicion = "top-end", string icono = "success", string mensaje = "Se creó el producto con éxito")
    {
        await js.InvokeAsync<object>("alerta", posicion, icono, mensaje);
    }

    public async Task ModalToggle()
    {
        await js.InvokeAsync<object>("ModalToggle");
    }
}

