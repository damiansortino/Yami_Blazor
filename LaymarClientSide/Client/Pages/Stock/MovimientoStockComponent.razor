@using LaymarClientSide.Shared.Entidades
@inject HttpClient http
@using LaymarClientSide.Shared.Dtos
@attribute [Authorize(Roles = "Stock, Admin")]
@inject IRepository repositorio
@using LaymarClientSide.Client.Repositorio
@page  "/movimientoStock"

@inject IJSRuntime js

<h2 class="mt-2">
    <strong>
        <span class="badge badge-light">
            <strong><i class="fas fa-cubes mr-1 text-info" style="font-size:1.3rem;"></i>MOVIMIENTOS DE STOCK</strong>
        </span>
    </strong>
</h2>

<div class="row col-md-12 mx-0">
    <button class="btn btn-info" @onclick="@(async()=> await ModalToggle())">Nuevo Movimiento</button>
</div>
<div class="row col-md-12 mx-0  pt-2">
    <div class="col-md-12 row mx-0 px-0">
        <div class="input-group col-md-3 mb-3 mx-0 px-0">
            <div class="input-group-prepend input-group-sm ">
                <span class="input-group-text " id="basic-addon1">Desde</span>
            </div>
            <input type="date" class="form-control" value="@DateTime.Now.AddHours(-3).ToString("yyyy-MM-dd")" @onchange="@(async (ChangeEventArgs e)=> { fechaDesde = Convert.ToDateTime(e.Value.ToString());  await ListarMovimientoStock(); })" />
        </div>
        <div class="input-group mb-3 col-md-3">
            <div class="input-group-prepend input-group-sm">
                <span class="input-group-text" id="basic-addon1">Hasta</span>
            </div>
            <input type="date" class="form-control" value="@DateTime.Now.AddHours(-3).ToString("yyyy-MM-dd")" @onchange="@(async (ChangeEventArgs e)=> { fechaHasta = Convert.ToDateTime(e.Value.ToString()); await ListarMovimientoStock(); })" />
        </div>

    </div>
    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <button type="button" class="btn btn-outline-secondary">@(criterioBusqueda == String.Empty ? "Producto" : criterioBusqueda) </button>
            <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="sr-only">Toggle Dropdown</span>
            </button>
            <div class="dropdown-menu">
                <a class="dropdown-item" @onclick="@(() => criterioBusqueda = " Codigo")">Codigo</a>
                <a class="dropdown-item" @onclick="@(() => criterioBusqueda = " Producto")">Producto</a>
                <a class="dropdown-item" @onclick="@(() => criterioBusqueda = " Sucursal")">Sucursal</a>
                <a class="dropdown-item" @onclick="@(() => criterioBusqueda = " Fecha")">Fecha</a>
                <a class="dropdown-item" @onclick="@(() => criterioBusqueda = " Tipo Movimiento")">Tipo Movimiento</a>
            </div>
        </div>
        <input type="text" class="form-control" @bind-value="@cadenafiltroBusqueda" @bind-value:event="oninput" @onkeypress="@((KeyboardEventArgs e)=> {  FiltrarMovimientoStock(e); })">

        <div>

        </div>
    </div>



</div>

<div class="row col-md-12 mx-0">
    <ListadoGenerico listado="movimientoStocksBuscados">
        <HayRegistros>
            <table class="table">
                <thead class="bg-dark text-white">
                    <tr>
                        <td>Codigo</td>
                        <td>Tipo</td>
                        <td>Producto</td>
                        <td>Fecha</td>
                        <td>Sucursal</td>
                        <td>Entra</td>
                        <td>Sale</td>
                        <td>Comprobante</td>
                        <td>Cantidad</td>

                    </tr>
                </thead>
                <tbody>
                    @foreach (MovimientoStock movimiento in movimientoStocksBuscados)
                    {

                        <tr class="@(movimiento.fechaBaja != null? "text-danger":"")">
                            <td>@movimiento.MovimientoStockId</td>
                            <td>@movimiento.tipoMovimientoStock.nombreTipoMovimientoStock</td>
                            <td>@movimiento.stock.producto.nombre (@(movimiento.stock.producto.ProductoId))</td>

                            <td>@movimiento.fechaAlta</td>
                            <td>@movimiento.stock.sucursal.nombreSucursal</td>

                            <td><i class="@(movimiento.entra ? " fas fa-check text-success" : "fas fa-times text-danger" )"></i></td>
                            <td><i class="@(movimiento.sale ? " fas fa-check text-success" : "fas fa-times text-danger" )"></i></td>
                            <td>@(movimiento.comprobante != null ? $"{movimiento.comprobante.codigo}":"") <strong class="text-danger">@(movimiento.fechaBaja != null? " (ANULADO)":"")</strong></td>

                            <td>@movimiento.cantidad</td>

                        </tr>

                    }
                </tbody>
            </table>
        </HayRegistros>
        <NoHayRegistros>No hay movimiento de stock en el rango de fechas seleccionadas</NoHayRegistros>
    </ListadoGenerico>


    <div class="col-md-12 row mx-0">
        <div class="col-md-6 offset-md-3">
            <PaginacionComp PaginaActual="paginaActual" PaginasTotales="paginasTotales" PaginaSeleccionada="paginaSeleccionada"></PaginacionComp>
        </div>
    </div>

</div>
@*MODAL*@
<div class="modal p-0 fade" id="modal" data-backdrop="static" tabindex="-1" role="dialog">
    <div class="modal-dialog rounded border border-solid" role="document">
        <div class="modal-content">
            <div class="modal-header bg-dark text-white">
                <h5 class="modal-title">Nuevo Movimiento de Stock</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(async () => { await ModalToggle();  })">
                    <span class="text-danger" aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body p-2 m-1" data-spy="scroll">
                @*BODY *@
                <EditForm Model="@stock" OnValidSubmit="@GuardarMovimientoStock">
                    @if (error)
                    {<div class="text-danger">@errorMessage</div>}
                    <div class="row col-md-12 mx-0"><span><strong>@producto.nombre</strong></span></div>

                    <div class="input-group mb-2 col-md-12 mt-2">
                        <div class="col-md-12">
                            <div class="input-group input-group-sm mb-1 mt-1">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="inputGroup-sizing-sm">Codigo Producto</span>
                                </div>
                                <input type="number" class="form-control" @bind-value="@cadenaBusquedaProducto" @bind-value:event="oninput">
                                <div class="input-group-append" @onclick="@(()=> { if(!string.IsNullOrWhiteSpace(cadenaBusquedaProducto)){ buscarProducto(Convert.ToInt32(cadenaBusquedaProducto)); }; })">
                                    <label class="btn input-group-text" for="inputGroupSelect02"><i class="fas fa-search m-0 p-0"></i></label>
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="input-group mb-2 col-md-12 mt-2">
                        <div class="col-md-12">
                            <div class="input-group input-group-sm mb-1 mt-1">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="inputGroup-sizing-sm">Sucursal</span>
                                </div>
                                <select class="form-control" @onchange="@(async (ChangeEventArgs e)=> { sucursal = sucursales.Where(x => x.SucursalId == Convert.ToInt32(e.Value.ToString())).First(); })">
                                    <option selected disbled>Seleccione una sucursal</option>
                                    @foreach (Sucursal sucursal in sucursales)
                                    {
                                        <option value="@sucursal.SucursalId">@sucursal.nombreSucursal</option>
                                    }
                                </select>

                            </div>
                        </div>
                    </div>

                    <div class="input-group mb-2 col-md-12 mt-2">
                        <div class="col-md-12">
                            <div class="input-group input-group-sm mb-1 mt-1">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="inputGroup-sizing-sm">Tipo Movimiento</span>
                                </div>
                                <select class="form-control" @onchange="@((ChangeEventArgs e)=> movimientoStock.tipoMovimientoStock = tipoMovimientoStock.Where(x=> x.TipoMovimientoStockId == Convert.ToInt32(e.Value.ToString())).First())">
                                    <option selected disbled>Seleccione una Tipo de Movimiento</option>
                                    @if (tipoMovimientoStock.Count > 0)
                                    {

                                        @foreach (TipoMovimientoStock tipo in tipoMovimientoStock)
                                        {
                                            <option value="@tipo.TipoMovimientoStockId">@tipo.nombreTipoMovimientoStock</option>
                                        }
                                    }

                                </select>

                            </div>
                        </div>

                    </div>
                    <div class="col-md-12 row mx-0">
                        <div class="col-md-6 row mx-0 border border-solid rounded align-items-center">
                            <div class="col-md-6">
                                <input type="radio" id="entra" name="drone" @onchange="@((ChangeEventArgs e)=> { if(e.Value.ToString() == "on"){ movimientoStock.entra=true; movimientoStock.sale=false; }})">
                                <label for="huey">Entra</label>
                            </div>

                            <div class="col-md-6">
                                <input type="radio" id="sale" name="drone" @onchange="@((ChangeEventArgs e)=> { if(e.Value.ToString() == "on"){ movimientoStock.sale=true; movimientoStock.entra=false; }})">
                                <label for="dewey">Sale</label>
                            </div>

                        </div>

                        <div class="input-group mb-2 col-md-6 mt-2">
                            <div class="input-group input-group-sm mb-1 mt-1">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="inputGroup-sizing-sm">Cantidad</span>
                                </div>
                                <input type="number" class="form-control" @bind-value="@movimientoStock.cantidad">

                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-center row col-md-12 mx-0 mt-2 mb-3">

                        <button type="submit" class="btn btn-success col-md-12"><i class="fas fa-save mr-1"></i> Guardar</button>
                    </div>

                </EditForm>
            </div>

        </div>
    </div>
</div>





@code {
    public string cadenaBusquedaProducto { get; set; } = String.Empty;
    public string cadenafiltroBusqueda { get; set; } = String.Empty;
    public string criterioBusqueda { get; set; } = "Producto";
    public DateTime fechaDesde { get; set; } = DateTime.Now;
    public DateTime fechaHasta { get; set; } = DateTime.Now;
    public bool error { get; set; }
    public string errorMessage { get; set; }
    public Producto producto { get; set; } = new Producto();
    public Sucursal sucursal { get; set; } = new Sucursal();
    private int paginaActual = 1;
    private int paginasTotales;
    private HttpResponseWrapper<List<MovimientoStock>> responseHttp;

    public MovimientoStock movimientoStock { get; set; } = new MovimientoStock();
    public List<MovimientoStock>
    movimientoStocks
    { get; set; } = new List<MovimientoStock>
        ();

    public Stock stock { get; set; } = new Stock();

    public List<MovimientoStock>
        movimientoStocksBuscados
    { get; set; }
    public List<TipoMovimientoStock>
        tipoMovimientoStock
    { get; set; } = new List<TipoMovimientoStock>
            ();

    public List<Sucursal>
        sucursales
    { get; set; } = new List<Sucursal>
            ();
    public List<Producto>
        productos
    { get; set; } = new List<Producto>
            ();
    public MovimientoStockDto movimientoDto { get; set; } = new MovimientoStockDto();



    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await ListarMovimientoStock();
    }

    protected void buscarProducto(int codigo)
    {
        try
        {
            producto = productos.Where(x => x.ProductoId == codigo).First();
            error = false;
        }
        catch (Exception)
        {
            error = true;
            errorMessage = "No hay productos con este código";
        }
    }


    protected override async Task OnInitializedAsync()
    {


        await ListarTipoMovimientoStock();
        await ListarMovimientoStock();
        await ListarSucursales();
        await ListarProductos();
    }
    protected async Task ListarTipoMovimientoStock()
    {
        tipoMovimientoStock = await http.GetJsonAsync<List<TipoMovimientoStock>>("/api/Stock/ListarTipoMovimientoStock");
    }

    protected async Task ListarSucursales()
    {
        sucursales = await http.GetJsonAsync<List<Sucursal>>("/api/Sucursal/Listar");
    }


    protected async Task ListarProductos()
    {
        productos = await http.GetJsonAsync<List<Producto>>("/api/Producto/Listar");
    }


    protected async Task ListarMovimientoStock()
    {
        movimientoStocks = null;
        movimientoStocksBuscados = null;
        responseHttp = await repositorio.Get<List<MovimientoStock>>($"/api/Stock/ListarMovimientoStock?pagina={paginaActual}&fechaDesde={fechaDesde.ToString()}&fechaHasta={fechaHasta.ToString()}");
        if (!responseHttp.Error)
        {
            movimientoStocks = responseHttp.Response;
            movimientoStocksBuscados = movimientoStocks;

            var conteo = responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault();

            paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());

        }

    }



    protected async Task GuardarMovimientoStock()
    {


        movimientoDto.producto = producto;
        movimientoDto.sucursal = sucursal;
        movimientoDto.movimiento = movimientoStock;

        if (movimientoStock.tipoMovimientoStock == null || movimientoStock.tipoMovimientoStock.TipoMovimientoStockId == 0)
        {
            await Alerta("top-end", "error", "Tienes que seleccionar un tipo de movimiento");
        }
        if (movimientoDto.producto == null || movimientoDto.producto.ProductoId == 0)
        {
            await Alerta("top-end", "error", "Tienes que seleccionar un producto");
        }
        if (movimientoDto.sucursal == null || movimientoDto.sucursal.SucursalId == 0)
        {
            await Alerta("top-end", "error", "Tienes que seleccionar una Sucursal");
        }
        else if (!movimientoStock.sale && !movimientoStock.entra)
        {
            await Alerta("top-end", "error", "Tienes que seleccionar si el movimiento es de entrada o salida");
        }
        else if (movimientoStock.cantidad == 0 || movimientoStock.cantidad < 0)
        {
            await Alerta("top-end", "error", "La cantidad tiene que ser mayor que cero");

        }
        else
        {

            await http.PostJsonAsync($"/api/Stock/CrearMovimiento", movimientoDto);
            
            await Alerta("top-end", "success", "Se creó el movimientoStock con éxito");
            await ListarMovimientoStock();
            await ModalToggle();
        }
    }


    protected void FiltrarMovimientoStock(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (cadenafiltroBusqueda != "" && cadenafiltroBusqueda != string.Empty)
            {
                try
                {
                    if (criterioBusqueda == "Codigo")
                    {
                        movimientoStocksBuscados = movimientoStocks.Where(x => x.MovimientoStockId.ToString().ToLower().Contains(cadenafiltroBusqueda.ToLower()) && x.fechaAlta > fechaDesde && x.fechaAlta < fechaHasta.AddHours(24)).ToList();
                    }
                    if (criterioBusqueda == "Producto")
                    {
                        movimientoStocksBuscados = movimientoStocks.Where(x => x.stock.producto.nombre.ToString().ToLower().Contains(cadenafiltroBusqueda.ToLower()) && x.fechaAlta > fechaDesde && x.fechaAlta < fechaHasta.AddHours(24)).ToList();
                    }

                    if (criterioBusqueda == "Sucursal")
                    {
                        movimientoStocksBuscados = movimientoStocks.Where(x => x.stock.sucursal.nombreSucursal.ToString().ToLower().Contains(cadenafiltroBusqueda.ToLower()) && x.fechaAlta > fechaDesde && x.fechaAlta < fechaHasta.AddHours(24)).ToList();
                    }
                    if (criterioBusqueda == "TipoMovimiento")
                    {
                        movimientoStocksBuscados = movimientoStocks.Where(x => x.tipoMovimientoStock.nombreTipoMovimientoStock.ToString().ToLower().Contains(cadenafiltroBusqueda.ToLower()) && x.fechaAlta > fechaDesde && x.fechaAlta < fechaHasta.AddHours(24)).ToList();
                    }

                }
                catch (Exception)
                {


                }

            }
            else { movimientoStocksBuscados = movimientoStocks.Where(x => x.fechaAlta > fechaDesde && x.fechaAlta < fechaHasta.AddHours(24)).ToList(); }
        }
    }


    public async Task Alerta(string posicion = "top-end", string icono = "success", string mensaje = "Se creó el movimientoStock con éxito")
    {
        await js.InvokeAsync<object>("alerta", posicion, icono, mensaje);
    }

    public async Task ModalToggle()
    {
        await js.InvokeAsync<object>("ModalToggle");
    }
}


