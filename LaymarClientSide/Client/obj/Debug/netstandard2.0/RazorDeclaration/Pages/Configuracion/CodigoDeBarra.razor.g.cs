// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace LaymarClientSide.Client.Pages.Configuracion
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 4 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 5 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Client;

#line default
#line hidden
#line 7 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Client.Shared;

#line default
#line hidden
#line 8 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#line 9 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Client.Helpers;

#line default
#line hidden
#line 10 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Shared;

#line default
#line hidden
#line 11 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#line 12 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using OfficeOpenXml;

#line default
#line hidden
#line 13 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using OfficeOpenXml.Style;

#line default
#line hidden
#line 14 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using System.Drawing;

#line default
#line hidden
#line 1 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\Pages\Configuracion\CodigoDeBarra.razor"
using LaymarClientSide.Shared.Entidades;

#line default
#line hidden
#line 6 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\Pages\Configuracion\CodigoDeBarra.razor"
using LaymarClientSide.Shared.Dtos;

#line default
#line hidden
#line 2 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\Pages\Configuracion\CodigoDeBarra.razor"
           [Authorize(Roles = "Admin, Configuracion")]

#line default
#line hidden
    [Microsoft.AspNetCore.Components.RouteAttribute("/CodigosDeBarra")]
    public partial class CodigoDeBarra : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 188 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\Pages\Configuracion\CodigoDeBarra.razor"
       
    List<Producto> productos = new List<Producto>();
    List<Producto> productosFiltrados = new List<Producto>();
    List<codigosDeBarraDtos> codigosDeBarras = new List<codigosDeBarraDtos>();
    public string criterioBusqueda { get; set; } = "Nombre";
    public string cadenafiltroBusqueda { get; set; } = String.Empty;
    List<Stock> stocks = new List<Stock>();

    protected override async Task OnInitializedAsync()
    {

        await ListarProductos();
    }
    protected async Task ListarProductos()
    {

        productos = await http.GetJsonAsync<List<Producto>>("/api/Producto/Listar");
        productosFiltrados = productos;

    }

    protected void FiltrarProducto(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (cadenafiltroBusqueda != "" && cadenafiltroBusqueda != string.Empty)
            {
                try
                {
                    if (criterioBusqueda == "Codigo")
                    {
                        productosFiltrados = productos.Where(x => x.ProductoId.ToString().ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }
                    if (criterioBusqueda == "Nombre")
                    {
                        productosFiltrados = productos.Where(x => x.nombre.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }
                    if (criterioBusqueda == "Marca")
                    {
                        productosFiltrados = productos.Where(x => x.marca.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }
                    if (criterioBusqueda == "Proveedor")
                    {
                        productosFiltrados = productos.Where(x => x.proveedor.razonSocial.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }

                }
                catch (Exception)
                {


                }

            }
            else { productosFiltrados = productos; }
        }
    }



    public async Task Alerta(string posicion = "top-end", string icono = "success", string mensaje = "Se creó el comprobante con éxito")
    {
        await js.InvokeAsync<object>("alerta", posicion, icono, mensaje);
    }

    public async Task AgregarUltimosCreados(int cantidadHoras) {
        List<Producto> ultimosCreados;
        codigosDeBarras = new List<codigosDeBarraDtos>();
        if (cantidadHoras != 0)
        {
            ultimosCreados = productos.Where(x => x.fechaAlta >= DateTime.Now.AddHours(cantidadHoras * -1)).ToList();
        }
        else {
            ultimosCreados = productos;
        }
        foreach (Producto producto in ultimosCreados) {
            await agregarALaLista(producto);
        }
    }

    public async Task<List<Stock>> BuscarStockPorProducto(int productoId) {

        return await http.GetJsonAsync<List<Stock>>($"api/Stock/ListarPorProducto/{productoId}");
    }

    public async Task agregarALaLista(Producto producto)
    {
        stocks = await BuscarStockPorProducto(producto.ProductoId);
        codigosDeBarras.Add(new codigosDeBarraDtos { producto = producto, cantidadAImprimir = stocks.Sum(x => x.cantidad)});
    }

    protected async void DescargarCodigoDeBarra()
    {

        using (var package = new ExcelPackage())
        {
            var barCode = package.Workbook.Worksheets.Add($"CODIGOS DE BARRA");

            // Use LINQ to project data into the worksheet
            barCode.DefaultColWidth = 30;
            barCode.DefaultRowHeight = 15.2;
            barCode.Cells[$"A1:D{(productosFiltrados.Count / 4 + 3) * 2}"].Style.Fill.PatternType = ExcelFillStyle.Solid;
            barCode.Cells[$"A1:D{(productosFiltrados.Count / 4 + 3) * 2}"].Style.Fill.BackgroundColor.SetColor(Color.White);


            //HOJA DE CODIGOS DE BARRA
            barCode.Column(1).Width = 23.9396;
            barCode.Column(2).Width = 23.9396;
            barCode.Column(3).Width = 23.9396;
            barCode.Column(4).Width = 23.9396;
            barCode.Column(1).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            barCode.Column(1).Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            barCode.Column(2).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            barCode.Column(2).Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            barCode.Column(3).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            barCode.Column(3).Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            barCode.Column(4).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            barCode.Column(4).Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            barCode.PrinterSettings.RightMargin = (0.6M / 2.54M);  //margen derecho
            barCode.PrinterSettings.LeftMargin = (0.7M / 2.54M);   //margen izquierdo
            barCode.PrinterSettings.TopMargin = (2.3M / 2.54M);    //margen superior
            barCode.PrinterSettings.BottomMargin = (0.3M / 2.54M); //margen inferior
            barCode.PrinterSettings.HeaderMargin = 0;       // Margen de encabezado
            barCode.PrinterSettings.FooterMargin = 0;       // Margen pie de página
                                                            //barCode.PrinterSettings.FitToPage = true;
                                                            //barCode.PrinterSettings.FitToWidth = 100;
                                                            //barCode.PrinterSettings.FitToHeight = 100;
            int contador = 1;
            int fila = 0;
            int columna = 0;

            for (int i = 0; i < codigosDeBarras.Count; i++)
            {
                for (int j = 0; j < codigosDeBarras[i].cantidadAImprimir; j++)
                {
                    if (Math.Floor((contador - 1) / 4D) == 0)
                    {
                        fila = Convert.ToInt32(Math.Ceiling((contador) / 4M));
                        columna = (contador) % 4 == 0 ? 4 : (contador) % 4;
                    }
                    else if (Math.Floor((contador - 1) / 4D) == 1)
                    {
                        fila = Convert.ToInt32(Math.Ceiling((contador) / 4M) + 1);
                        columna = (contador) % 4 == 0 ? 4 : (contador) % 4;
                    }
                    else
                    {
                        fila = Convert.ToInt32(Math.Ceiling((contador) / 4M) * 2 - 1);
                        columna = (contador) % 4 == 0 ? 4 : (contador) % 4;

                    }
                    Console.WriteLine($"{contador} en [{fila},{columna}]");
                    var codigo = barCode.Cells[fila, columna];
                    var nombre = barCode.Cells[fila + 1, columna];


                    codigo.Value = $"*{codigosDeBarras[i].producto.codigo}*";
                    codigo.Style.Font.Name = "Bar-Code 39";
                    codigo.Style.Font.Size = 20; //tamaño de la barra
                    codigo.Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                    nombre.Value = $"{codigosDeBarras[i].producto.codigo}|{codigosDeBarras[i].producto.nombre}|{codigosDeBarras[i].producto.talle}|{codigosDeBarras[i].producto.color}|{codigosDeBarras[i].producto.marca}";
                    nombre.Style.Font.Size = 10; //tamaño de la descripcion
                    nombre.Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                    barCode.Row(fila).Height = 30; //alto de fila barra
                    barCode.Row(fila + 1).Height = 44;  //alto de fila descripcion


                    codigo.Style.Border.Top.Style = ExcelBorderStyle.None;
                    codigo.Style.Border.Right.Style = ExcelBorderStyle.None;
                    codigo.Style.Border.Left.Style = ExcelBorderStyle.None;

                    nombre.Style.Border.Bottom.Style = ExcelBorderStyle.None;
                    nombre.Style.Border.Right.Style = ExcelBorderStyle.None;
                    nombre.Style.Border.Left.Style = ExcelBorderStyle.None;
                    nombre.Style.WrapText = true;
                    contador++;
                }
            }
            await js.InvokeAsync<object>("saveAsFile", $"CODIGOS DE BARRA.xlsx", package.GetAsByteArray());

        }

    }
    public async Task ModalToggle()
    {
        await js.InvokeAsync<object>("ModalToggle");
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient http { get; set; }
    }
}
#pragma warning restore 1591
