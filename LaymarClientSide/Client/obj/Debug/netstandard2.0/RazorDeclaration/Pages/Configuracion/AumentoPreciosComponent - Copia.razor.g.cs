#pragma checksum "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\Pages\Configuracion\AumentoPreciosComponent - Copia.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0001aa922680f175cfc06841d7377eb906f4bd0f"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace LaymarClientSide.Client.Pages.Configuracion
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 4 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 5 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Client;

#line default
#line hidden
#line 7 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Client.Shared;

#line default
#line hidden
#line 8 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#line 9 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Client.Helpers;

#line default
#line hidden
#line 10 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Shared;

#line default
#line hidden
#line 11 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#line 12 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using OfficeOpenXml;

#line default
#line hidden
#line 13 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using OfficeOpenXml.Style;

#line default
#line hidden
#line 14 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using System.Drawing;

#line default
#line hidden
#line 1 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\Pages\Configuracion\AumentoPreciosComponent - Copia.razor"
using LaymarClientSide.Shared.Entidades;

#line default
#line hidden
#line 2 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\Pages\Configuracion\AumentoPreciosComponent - Copia.razor"
           [Authorize(Roles = "Admin, Configuracion")]

#line default
#line hidden
    [Microsoft.AspNetCore.Components.RouteAttribute("/AumentoDePrecios")]
    public partial class AumentoPreciosComponent___Copia : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 134 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\Pages\Configuracion\AumentoPreciosComponent - Copia.razor"
       
    List<Producto> productos = new List<Producto>();
    List<Producto> productosFiltrados = new List<Producto>();
    public string criterioBusqueda { get; set; } = "Nombre";
    public string cadenafiltroBusqueda { get; set; } = String.Empty;
    public double aumentoPorcentualRentabilidad { get; set; }


    protected override async Task OnInitializedAsync()
    {

        await ListarProductos();
    }
    protected async Task ListarProductos()
    {

        productos = await http.GetJsonAsync<List<Producto>>("/api/Producto/Listar");
        productosFiltrados = productos;

    }

    protected void FiltrarProducto(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (cadenafiltroBusqueda != "" && cadenafiltroBusqueda != string.Empty)
            {
                try
                {
                    if (criterioBusqueda == "Codigo")
                    {
                        productosFiltrados = productos.Where(x => x.ProductoId.ToString().ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }
                    if (criterioBusqueda == "Nombre")
                    {
                        productosFiltrados = productos.Where(x => x.nombre.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }
                    if (criterioBusqueda == "Marca")
                    {
                        productosFiltrados = productos.Where(x => x.marca.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }
                    if (criterioBusqueda == "Proveedor")
                    {
                        productosFiltrados = productos.Where(x => x.proveedor.razonSocial.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }

                }
                catch (Exception)
                {


                }

            }
            else { productosFiltrados = productos; }
        }
    }

    protected async Task EditarPrecios()
    {

        foreach (Producto producto in productosFiltrados)
        {

            producto.porcentajeRentabilidad += aumentoPorcentualRentabilidad;

        }

        await http.PostJsonAsync("api/Producto/EditarPrecios", productosFiltrados);
        await ListarProductos();
        aumentoPorcentualRentabilidad = 0.00;
        cadenafiltroBusqueda = String.Empty;
        await Alerta("top-end", "success", "Se realizaron las modificaciones con éxito");
    }

    public async Task Alerta(string posicion = "top-end", string icono = "success", string mensaje = "Se creó el comprobante con éxito")
    {
        await js.InvokeAsync<object>("alerta", posicion, icono, mensaje);
    }

    public async Task ModalConfirmToggle()
    {
        await js.InvokeAsync<object>("ModalConfirmToggle");
    }


    protected async void DescargarListaPrecios()
    {

        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add($"LISTA DE PRECIOS");
            var barCode = package.Workbook.Worksheets.Add($"CODIGOS DE BARRA");

            // Use LINQ to project data into the worksheet
            worksheet.DefaultColWidth = 24;
            worksheet.DefaultRowHeight = 13.2;
            barCode.DefaultColWidth = 30;
            barCode.DefaultRowHeight = 15.2;
            worksheet.Cells["A1:J100"].Style.Fill.PatternType = ExcelFillStyle.Solid;
            worksheet.Cells["A1:J100"].Style.Fill.BackgroundColor.SetColor(Color.White);
            barCode.Cells[$"A1:D{(productosFiltrados.Count/4 +3)*2}"].Style.Fill.PatternType = ExcelFillStyle.Solid;
            barCode.Cells[$"A1:D{(productosFiltrados.Count/4 +3)* 2}"].Style.Fill.BackgroundColor.SetColor(Color.White);

            var encabezado = worksheet.Cells[1, 1, 2, 6];
            encabezado.Style.Font.Bold = true;
            encabezado.Merge = true;
            encabezado.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            encabezado.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            encabezado.Style.Font.Size = 18;
            encabezado.Value = $"LISTA DE PRECIOS - {DateTime.Now.AddHours(-3)}";

            var tableBody = worksheet.Cells[$"A4:F{4 + productosFiltrados.Count}"];
            tableBody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            tableBody.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            tableBody.Style.Fill.PatternType = ExcelFillStyle.Solid;
            tableBody.Style.Fill.BackgroundColor.SetColor(Color.White);
            tableBody.Style.Font.Color.SetColor(Color.Black);



            var header = worksheet.Cells["A4:F4"];
            worksheet.Cells["A4"].Value = "CODIGO";
            worksheet.Cells["B4"].Value = "NOMBRE";
            worksheet.Cells["C4"].Value = "TALLE";
            worksheet.Cells["D4"].Value = "MARCA";
            worksheet.Cells["E4"].Value = "PROVEEDOR";
            worksheet.Cells["F4"].Value = "PRECIO VENTA";
            header.Style.Font.Bold = true;
            header.Style.Font.Color.SetColor(Color.Black);
            header.Style.Font.Bold = true;
            header.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            header.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            header.Style.Fill.PatternType = ExcelFillStyle.Solid;
            header.Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);


            for (int i = 0; i < productosFiltrados.Count; i++)

            {
                worksheet.Cells[$"A{5 + i}"].Value = productosFiltrados[i].codigo;
                worksheet.Cells[$"B{5 + i}"].Value = productosFiltrados[i].nombre;
                worksheet.Cells[$"C{5 + i}"].Value = productosFiltrados[i].talle;
                worksheet.Cells[$"D{5 + i}"].Value = productosFiltrados[i].marca;
                worksheet.Cells[$"E{5 + i}"].Value = productosFiltrados[i].proveedor.razonSocial;
                worksheet.Cells[$"F{5 + i}"].Value = productosFiltrados[i].precioUnitario * (productosFiltrados[i].porcentajeRentabilidad / 100 + 1);

            }




            worksheet.Column(6).Style.Numberformat.Format = "$#,##0.00";
            worksheet.Column(7).Style.Numberformat.Format = "0.00%";
            worksheet.Column(8).Style.Font.Size = 24;



            //HOJA DE CODIGOS DE BARRA
            barCode.Column(1).Width = 24.1276;
            barCode.Column(2).Width = 24.1276;
            barCode.Column(3).Width = 24.1276;
            barCode.Column(4).Width = 24.1276;
            barCode.Column(1).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            barCode.Column(1).Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            barCode.Column(2).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            barCode.Column(2).Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            barCode.Column(3).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            barCode.Column(3).Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            barCode.Column(4).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            barCode.Column(4).Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            barCode.PrinterSettings.RightMargin = (0.88M / 2.54M);
            barCode.PrinterSettings.LeftMargin = (0.88M / 2.54M);
            barCode.PrinterSettings.TopMargin = (1.9M / 2.54M);
            barCode.PrinterSettings.BottomMargin = (1.9M / 2.54M);
            barCode.PrinterSettings.HeaderMargin = 0;
            barCode.PrinterSettings.FooterMargin = 0;
            //barCode.PrinterSettings.FitToPage = true;
            //barCode.PrinterSettings.FitToWidth = 100;
            //barCode.PrinterSettings.FitToHeight = 100;


            for (int i = 0; i < productosFiltrados.Count; i++)
            {
                if (Math.Floor(i/4D) == 0)
                {
                    var codigo = barCode.Cells[Convert.ToInt32(Math.Ceiling((i + 1) / 4M)), (i + 1) % 4 == 0 ? 4 : (i + 1) % 4];
                    var nombre = barCode.Cells[Convert.ToInt32(Math.Ceiling((i + 1) / 4M)) + 1, (i + 1) % 4 == 0 ? 4 : (i + 1) % 4];
                    codigo.Value = $"*{productosFiltrados[i].codigo}*";
                    codigo.Style.Font.Name = "Bar-Code 39";
                    codigo.Style.Font.Size = 20;

                    nombre.Value = $"{productosFiltrados[i].nombre}|{productosFiltrados[i].talle}|{productosFiltrados[i].color}|{productosFiltrados[i].marca}";
                    nombre.Style.Font.Size = 6;
                    barCode.Row(Convert.ToInt32(Math.Ceiling((i + 1) / 4M))).Height = 57.5714;
                    barCode.Row(Convert.ToInt32(Math.Ceiling((i + 1) / 4M))+1).Height = 15;

                    codigo.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    codigo.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    codigo.Style.Border.Left.Style = ExcelBorderStyle.Thin;

                    nombre.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    nombre.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    nombre.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                }
                else {
                    var codigo = barCode.Cells[Convert.ToInt32(Math.Ceiling((i + 1) / 4M)) +1, (i + 1) % 4 == 0 ? 4 : (i + 1) % 4];
                    var nombre = barCode.Cells[Convert.ToInt32(Math.Ceiling((i + 1) / 4M)) + 2, (i + 1) % 4 == 0 ? 4 : (i + 1) % 4];
                    codigo.Value = $"*{productosFiltrados[i].codigo}*";
                    codigo.Style.Font.Name = "Bar-Code 39";
                    codigo.Style.Font.Size = 20;

                    nombre.Value = $"{productosFiltrados[i].nombre}|{productosFiltrados[i].talle}|{productosFiltrados[i].color}|{productosFiltrados[i].marca}";
                    nombre.Style.Font.Size = 6;

                    barCode.Row(Convert.ToInt32(Math.Ceiling((i + 1) / 4M)) +1).Height = 57.5714;
                    barCode.Row(Convert.ToInt32(Math.Ceiling((i + 1) / 4M)) + 2).Height = 15;


                    codigo.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    codigo.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    codigo.Style.Border.Left.Style = ExcelBorderStyle.Thin;

                    nombre.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    nombre.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    nombre.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                }

            }

            await js.InvokeAsync<object>("saveAsFile", $"Lista de precios.xlsx", package.GetAsByteArray());

        }

    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient http { get; set; }
    }
}
#pragma warning restore 1591
