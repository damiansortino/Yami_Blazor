#pragma checksum "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\Pages\Ventas\Ventas.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "38c5142f5309b2dac25197d9a7f991c6371c2c55"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace LaymarClientSide.Client.Pages.Ventas
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 4 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 5 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Client;

#line default
#line hidden
#line 7 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Client.Shared;

#line default
#line hidden
#line 9 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Client.Helpers;

#line default
#line hidden
#line 10 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Shared;

#line default
#line hidden
#line 11 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#line 12 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using OfficeOpenXml;

#line default
#line hidden
#line 13 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using OfficeOpenXml.Style;

#line default
#line hidden
#line 14 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using System.Drawing;

#line default
#line hidden
#line 1 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\Pages\Ventas\Ventas.razor"
using LaymarClientSide.Shared.Entidades;

#line default
#line hidden
#line 4 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\Pages\Ventas\Ventas.razor"
using LaymarClientSide.Shared.Dtos;

#line default
#line hidden
#line 5 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\Pages\Ventas\Ventas.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#line 3 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\Pages\Ventas\Ventas.razor"
           [Authorize(Roles = "Ventas, Admin")]

#line default
#line hidden
    [Microsoft.AspNetCore.Components.RouteAttribute("/Ventas")]
    public partial class Ventas : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 461 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\Pages\Ventas\Ventas.razor"
       
    public string cadenaBusqueda { get; set; }
    public string cadenafiltroBusqueda { get; set; } = String.Empty;
    public string criterioBusqueda { get; set; } = "Razon Social";
    public DateTime fechaDesde { get; set; } = DateTime.Now.AddHours(-3).Date;
    public DateTime fechaHasta { get; set; } = DateTime.Now.AddHours(-3).Date;
    public Sucursal sucursal { get; set; } = VariablesGlobales.sucursal;
    public UserInfo user { get; set; }
    public List<Sucursal> sucursales { get; set; } = new List<Sucursal>();
    public List<UserInfo> users { get; set; } = new List<UserInfo>();
    public List<FacturaDto> ventas { get; set; } = new List<FacturaDto>();
    public List<FacturaDto> ventasBuscadas { get; set; } = new List<FacturaDto>();
    public FacturaDto venta { get; set; } = new FacturaDto { comprobante = new Comprobante { personaJuridica = new Cliente(), sucursal = new Sucursal() }, detalles = new List<DetalleFactura>() };

    protected override async Task OnInitializedAsync()
    {

       
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        await ListarUsuarios();
        await ListarSucursales();
        user = users.Where(x => x.username == authState.User.Identity.Name).First();

        await ListarVentas();


    }

    protected async Task ListarUsuarios()
    {
        users = await http.GetJsonAsync<List<UserInfo>>("/api/Cuentas/Usuarios");

    }
    protected async Task ListarSucursales()
    {
        sucursales = await http.GetJsonAsync<List<Sucursal>>("/api/Sucursal/Listar");


    }
    protected async Task ListarVentas()
    {
        Console.WriteLine($"/api/Comprobante/ListarVentas/{sucursal.SucursalId}/{user.username}/{fechaDesde.ToString("dd-MM-yyyy")}/{fechaHasta.ToString("dd-MM-yyyy")}");
        if (user.username == null || user.username == "")
        {
            ventas = await http.GetJsonAsync<List<FacturaDto>>($"/api/Comprobante/ListarVentas/{sucursal.SucursalId}/TODOS/{fechaDesde.ToString("dd-MM-yyyy")}/{fechaHasta.ToString("dd-MM-yyyy")}");

        }
        else
        {
            ventas = await http.GetJsonAsync<List<FacturaDto>>($"/api/Comprobante/ListarVentas/{sucursal.SucursalId}/{user.username}/{fechaDesde.ToString("dd-MM-yyyy")}/{fechaHasta.ToString("dd-MM-yyyy")}");

        }
        if (ventas.Count > 0)
        {
            venta = ventas.Last();
            cadenaBusqueda = Convert.ToString(venta.comprobante.codigo);
        }
        else
        {
            venta = new FacturaDto { comprobante = new Comprobante { personaJuridica = new Cliente(), sucursal = new Sucursal() }, detalles = new List<DetalleFactura>() };
            cadenaBusqueda = "";

        }
        ventasBuscadas = ventas;

    }

    protected async Task AnularVenta()
    {

        await http.DeleteAsync($"/api/Comprobante/AnularVenta/{venta.comprobante.ComprobanteId}");
        await ListarVentas();
        await Alerta("top-end", "info", "Se anulo el comprobante");

    }

    protected async Task BuscarVenta(string codigo)
    {
        FacturaDto ventaEncontrada = null;
        try
        {
            ventaEncontrada = ventas.Where(x => x.comprobante.codigo == codigo).First();

        }
        catch (Exception)
        {

        }

        if (ventaEncontrada != null)
        {
            venta = ventaEncontrada;

        }
        else
        {
            cadenaBusqueda = Convert.ToString(venta.comprobante.codigo);
            await Alerta("top-end", "error", "Venta inexistente");

        }

    }




    protected void FiltrarVenta(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (cadenafiltroBusqueda != "" && cadenafiltroBusqueda != string.Empty)
            {
                try
                {
                    if (criterioBusqueda == "Codigo")
                    {
                        ventasBuscadas = ventas.Where(x => x.comprobante.codigo.ToString().ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }
                    if (criterioBusqueda == "Cliente")
                    {
                        ventasBuscadas = ventas.Where(x => x.comprobante.personaJuridica.razonSocial.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }

                }
                catch (Exception)
                {


                }

            }
            else { ventasBuscadas = ventas; }
        }
    }


    public async Task Alerta(string posicion = "top-end", string icono = "success", string mensaje = "Se creó el producto con éxito")
    {
        await js.InvokeAsync<object>("alerta", posicion, icono, mensaje);
    }

    public async Task ModalToggle()
    {
        await js.InvokeAsync<object>("ModalToggle");
    }

    public async Task ModalConfirmToggle()
    {
        await js.InvokeAsync<object>("ModalConfirmToggle");
    }


    protected async void DescargarVentasExcel()
    {

        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add($"Ventas");

            // Use LINQ to project data into the worksheet
            worksheet.DefaultColWidth = 24;
            worksheet.DefaultRowHeight = 13.2;
            worksheet.Cells["A1:T40"].Style.Fill.PatternType = ExcelFillStyle.Solid;
            worksheet.Cells["A1:T40"].Style.Fill.BackgroundColor.SetColor(Color.White);
            var tableBody = worksheet.Cells["B4:G4"].LoadFromCollection(
            from v in ventasBuscadas.OrderBy(x => x.comprobante.sucursal.nombreSucursal).ThenBy(x => x.comprobante.fechaAlta)
            select new { v.comprobante.sucursal.nombreSucursal, v.comprobante.UserName, v.comprobante.codigo, v.comprobante.fechaAlta, v.comprobante.personaJuridica.razonSocial, v.comprobante.importe }, true);

            tableBody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            tableBody.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            tableBody.Style.Fill.PatternType = ExcelFillStyle.Solid;
            tableBody.Style.Fill.BackgroundColor.SetColor(Color.White);
            tableBody.Style.Font.Color.SetColor(Color.Black);
            tableBody.Style.Border.BorderAround(ExcelBorderStyle.Dashed);

            worksheet.DefaultColWidth = 24;
            worksheet.DefaultRowHeight = 13.2;
            var encabezado = worksheet.Cells[1, 2, 2, 6];


            encabezado.Style.Font.Bold = true;
            encabezado.Merge = true;
            encabezado.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            encabezado.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            encabezado.Style.Font.Size = 14;
            encabezado.Value = "INFORME DE VENTAS";



            //worksheet.Cells[4, 6, tableBody.Rows + 3, 6].Formula = $"C5*D5-E5";
            //worksheet.Calculate();

            // Formatting
            var titulopro = worksheet.Cells["B3:F3"];
            worksheet.Row(3).Height = 30;
            titulopro.Merge = true;
            titulopro.Value = $"Desde:{fechaDesde.ToString("dd/MM/yyyy")} Hasta:{fechaHasta.ToString("dd/MM/yyyy")} - Sucursal: {sucursal.nombreSucursal} - Vendedor:{user.username}";
            titulopro.Style.Fill.PatternType = ExcelFillStyle.Solid;
            titulopro.Style.Fill.BackgroundColor.SetColor(Color.White);
            titulopro.Style.Font.Color.SetColor(Color.Black);
            titulopro.Style.Font.Bold = false;
            titulopro.Style.Font.Size = 14;

            var header = worksheet.Cells["B4:G4"];
            worksheet.Cells["B4"].Value = "SUCURSAL";
            worksheet.Cells["C4"].Value = "VENDEDOR";
            worksheet.Cells["D4"].Value = "CODIGO";
            worksheet.Cells["E4"].Value = "FECHA";
            worksheet.Cells["F4"].Value = "CLIENTE";
            worksheet.Column(5).Style.Numberformat.Format = "dd-mm-yyyy HH:mm";
            worksheet.Column(7).Style.Numberformat.Format = "$#,##0.00";

            var total = worksheet.Cells[$"G{5 + ventasBuscadas.Count()}"];

            total.Value = ventasBuscadas.Sum(x => x.comprobante.importe);
            total.Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
            total.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            total.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            total.Style.Fill.PatternType = ExcelFillStyle.Solid;
            total.Style.Border.BorderAround(ExcelBorderStyle.Medium);

            header.Style.Font.Bold = true;
            header.Style.Font.Color.SetColor(Color.Black);
            header.Style.Font.Bold = true;

            header.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            header.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            header.Style.Fill.PatternType = ExcelFillStyle.Solid;
            header.Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
            header.Style.Border.BorderAround(ExcelBorderStyle.Medium);





            await js.InvokeAsync<object>("saveAsFile", $"Informe de Ventas.xlsx", package.GetAsByteArray());

        }

    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient http { get; set; }
    }
}
#pragma warning restore 1591
