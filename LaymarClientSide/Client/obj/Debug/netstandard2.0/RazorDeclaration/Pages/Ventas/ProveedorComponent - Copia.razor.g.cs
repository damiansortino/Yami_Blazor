#pragma checksum "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\Pages\Ventas\ProveedorComponent - Copia.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b9f5ceced119c0b44b8373b5a112f1b4f7a157e6"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace LaymarClientSide.Client.Pages.Ventas
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 4 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 5 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Client;

#line default
#line hidden
#line 7 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Client.Shared;

#line default
#line hidden
#line 8 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#line 9 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Client.Helpers;

#line default
#line hidden
#line 10 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Shared;

#line default
#line hidden
#line 11 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#line 1 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\Pages\Ventas\ProveedorComponent - Copia.razor"
using LaymarClientSide.Shared.Entidades;

#line default
#line hidden
#line 5 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\Pages\Ventas\ProveedorComponent - Copia.razor"
           [Authorize(Roles ="Compras, Admin")]

#line default
#line hidden
    [Microsoft.AspNetCore.Components.RouteAttribute("/proveedor")]
    public partial class ProveedorComponent___Copia : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 276 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\Pages\Ventas\ProveedorComponent - Copia.razor"
       
    public bool valido { get; set; } = true;
    public string cadenaBusqueda { get; set; }
    public string cadenafiltroBusqueda { get; set; } = String.Empty;
    public string criterioBusqueda { get; set; } = "Razon Social";

    public string AccionSobreProveedor { get; set; } = "Detalles";
    public Proveedor proveedor { get; set; } = new Proveedor();
    public List<Proveedor> proveedores { get; set; } = new List<Proveedor>();
    public List<Proveedor> proveedoresBuscados { get; set; } = new List<Proveedor>();



    protected override async Task OnInitializedAsync()
    {
        await ListarProveedores();
        if (proveedores.Count > 0)
        {
            proveedor = proveedores.Last();
            cadenaBusqueda = proveedor.ProveedorId;
        }

    }
    protected async Task ListarProveedores()
    {
        proveedores = await http.GetJsonAsync<List<Proveedor>>("/api/Proveedor/Listar");
    }

    protected async Task BuscarProveedor(string codigo)
    {
        Proveedor proveedorEncontrado = null;
        AccionSobreProveedor = "Detalles";
        try
        {
            proveedorEncontrado = proveedores.Where(x => x.ProveedorId == codigo).First();

        }
        catch (Exception)
        {

        }

        if (proveedorEncontrado != null)
        {
            proveedor = proveedorEncontrado;
            if (proveedor.fechaBaja != null)
            {
                valido = false;
            }
            else { valido = true; }
        }
        else
        {
            cadenaBusqueda = proveedor.ProveedorId;
            await Alerta("top-end", "error", "Proveedor inexistente");

        }
        await DeshabilitarFormulario();

    }

    protected async Task GuardarProveedor()
    {
        

#line default
#line hidden
#line 339 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\Pages\Ventas\ProveedorComponent - Copia.razor"
         if (AccionSobreProveedor == "Crear")
        {
            await http.PostJsonAsync("/api/Proveedor/Crear", proveedor);
            await DeshabilitarFormulario();

            await Alerta("top-end", "success", "Se creó con éxito");
            cadenaBusqueda = proveedor.ProveedorId;

        }

#line default
#line hidden
#line 348 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\Pages\Ventas\ProveedorComponent - Copia.razor"
         if (AccionSobreProveedor == "Editar")
        {

            await http.PutJsonAsync($"/api/Proveedor/Editar/{proveedor.PersonaJuridicaId}", proveedor);
            await DeshabilitarFormulario();
            await Alerta("top-end", "success", "Se editó con éxito");

        }

#line default
#line hidden
#line 355 "C:\Users\agust\source\repos\LaymarClientSide\LaymarClientSide\Client\Pages\Ventas\ProveedorComponent - Copia.razor"
         
        AccionSobreProveedor = "Detalle";

        await ListarProveedores();
    }

    protected async Task CrearProveedor()
    {
        AccionSobreProveedor = "Crear";
        proveedor = new Proveedor();
        if (proveedores.Count > 0)
        {
            proveedor.ProveedorId = Convert.ToString(Convert.ToInt32(proveedores.Last().ProveedorId) + 1);

        }
        else
        {
            proveedor.ProveedorId = "1";

        }
        valido = false;
        await HabilitarFormulario();

    }
    protected async Task AnularProveedor()
    {
        await http.DeleteAsync($"/api/Proveedor/Anular/{proveedor.PersonaJuridicaId}");
        await ListarProveedores();
    }

    protected void FiltrarProveedor(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (cadenafiltroBusqueda != "" && cadenafiltroBusqueda != string.Empty)
            {
                if (criterioBusqueda == "Razon Social")
                {
                    proveedoresBuscados = proveedores.Where(x => x.razonSocial.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                }
                if (criterioBusqueda == "Cuit")
                {
                    proveedoresBuscados = proveedores.Where(x => x.cuit.Contains(cadenafiltroBusqueda)).ToList();
                }
                if (criterioBusqueda == "Codigo")
                {
                    proveedoresBuscados = proveedores.Where(x => x.ProveedorId.Contains(cadenafiltroBusqueda)).ToList();
                }
            }
            else { proveedoresBuscados = proveedores; }
        }
    }
    public async Task HabilitarFormulario()
    {
        await js.InvokeAsync<object>("EnabledFieldFormulario");
    }
    public async Task DeshabilitarFormulario()
    {
        await js.InvokeAsync<object>("DisabledFieldFormulario");
    }

    public async Task Alerta(string posicion = "top-end", string icono = "success", string mensaje = "Se creó el proveedor con éxito")
    {
        await js.InvokeAsync<object>("alerta", posicion, icono, mensaje);
    }

    public async Task ModalToggle()
    {
        await js.InvokeAsync<object>("ModalToggle");
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient http { get; set; }
    }
}
#pragma warning restore 1591
