#pragma checksum "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\Pages\Ventas\NuevaVenta.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "748b88a920e1b17a5839387bf747b4510c822468"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace LaymarClientSide.Client.Pages.Ventas
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 4 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 5 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Client;

#line default
#line hidden
#line 7 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Client.Shared;

#line default
#line hidden
#line 9 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Client.Helpers;

#line default
#line hidden
#line 10 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Shared;

#line default
#line hidden
#line 11 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#line 12 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using OfficeOpenXml;

#line default
#line hidden
#line 13 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using OfficeOpenXml.Style;

#line default
#line hidden
#line 14 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\_Imports.razor"
using System.Drawing;

#line default
#line hidden
#line 1 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\Pages\Ventas\NuevaVenta.razor"
using LaymarClientSide.Shared.Entidades;

#line default
#line hidden
#line 6 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\Pages\Ventas\NuevaVenta.razor"
using LaymarClientSide.Shared.Dtos;

#line default
#line hidden
#line 7 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\Pages\Ventas\NuevaVenta.razor"
using System.Security.Claims;

#line default
#line hidden
#line 8 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\Pages\Ventas\NuevaVenta.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#line 5 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\Pages\Ventas\NuevaVenta.razor"
           [Authorize(Roles = "Ventas, Admin")]

#line default
#line hidden
    [Microsoft.AspNetCore.Components.RouteAttribute("/nuevaVenta")]
    public partial class NuevaVenta : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 462 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\Pages\Ventas\NuevaVenta.razor"
       
    public bool valido { get; set; } = true;
    public string cadenaBusqueda { get; set; }
    public string cadenafiltroBusqueda { get; set; } = String.Empty;
    public string criterioBusqueda { get; set; } = "Codigo";
    public string AccionSobreComprobante { get; set; } = "Detalles";
    public string AccionModal { get; set; } = "";
    public int busquedaCliente { get; set; }
    public bool ExisteCajaDiariaBandera { get; set; } = true;

    public List<Producto> productos { get; set; } = new List<Producto>();
    public List<Producto> productosBuscados { get; set; } = new List<Producto>();
    public List<UserInfo> users { get; set; } = new List<UserInfo>();
    public UserInfo user { get; set; }

    public Cliente cliente { get; set; } = new Cliente();
    public List<Cliente> clientes { get; set; } = new List<Cliente>();
    public List<Cliente> clientesBuscados { get; set; } = new List<Cliente>();

    public FacturaDto venta { get; set; } = new FacturaDto
    {
        comprobante = new Comprobante { personaJuridica = new Cliente() },
        detalles = new List<DetalleFactura>()
    };

    public DetalleFactura detalleActual { get; set; } = new DetalleFactura();

    protected override async Task OnInitializedAsync()
    {


        await ExisteCajaDiaria();
        await ListarUsuarios();

        await ListarProductos();
        await ListarClientes();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = users.Where(x => x.username == authState.User.Identity.Name).First();

    }
    protected async Task ExisteCajaDiaria()
    {
        ExisteCajaDiariaBandera = await http.PostJsonAsync<bool>($"/api/Caja/ExisteCajaDia", VariablesGlobales.sucursal);

    }

    protected async Task ListarUsuarios()
    {
        users = await http.GetJsonAsync<List<UserInfo>>("/api/Cuentas/Usuarios");

    }
    protected async Task ListarClientes()
    {
        clientes = await http.GetJsonAsync<List<Cliente>>("/api/Cliente/Listar");
        clientes = clientes.Where(x => x.fechaBaja == null).ToList();
        clientesBuscados = clientes;
    }
    protected async Task ListarProductos()
    {
        productos = await http.GetJsonAsync<List<Producto>>("/api/Producto/Listar");
        productos = productos.Where(x => x.fechaBaja == null).ToList();
    }

    protected async Task GuardarVenta()
    {
        bool bandera = false;

        foreach (DetalleFactura detalle in venta.detalles)
        {
            

#line default
#line hidden
#line 531 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\Pages\Ventas\NuevaVenta.razor"
             if (detalle.cantidad == 0 || detalle.producto.ProductoId == 0)
            {
                bandera = true;
            }

#line default
#line hidden
#line 534 "C:\Users\DAMIAN\Desktop\LAYMAR_200521\LaymarClientSide\Client\Pages\Ventas\NuevaVenta.razor"
             
        }
        venta.comprobante.importe = venta.detalles.Sum(x => x.cantidad * ((x.producto.precioUnitario * (x.producto.porcentajeRentabilidad / 100 + 1)) - x.bonificacion)) - venta.comprobante.bonificacion;

        if (venta.comprobante.personaJuridica == null || venta.comprobante.personaJuridica.PersonaJuridicaId == 0)
        {
            await Alerta("top-end", "error", "Tienes que seleccionar un cliente");

        }
        else if (venta.detalles.Count == 0)
        {
            await Alerta("top-end", "error", "Tienes que cargar al menos un artículo");

        }
        else if (bandera)
        {
            await Alerta("top-end", "error", "No pueden haber renglones sin productos o sin cantidad");

        }
        else if (venta.comprobante.importe != (venta.comprobante.efectivo + venta.comprobante.tarjeta))
        {
            await Alerta("top-end", "error", "El total de la venta y el total del pago tienen que coincidir");
        }
        else
        {
            try
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                venta.comprobante.UserName = user.username;

                venta.comprobante.sucursal = VariablesGlobales.sucursal;
                await http.PostJsonAsync("/api/Comprobante/CrearVenta", venta);
                await Alerta("top-end", "success", "Se creó la venta con éxito");

                venta = new FacturaDto
                {
                    comprobante = new Comprobante { personaJuridica = new Cliente() },
                    detalles = new List<DetalleFactura>()
                };

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                await Alerta("top-end", "error", "Ocurrio un error");
            }
        }
    }
    protected async Task buscarProducto(DetalleFactura detalle)
    {

        try
        {

            detalle.producto = productos.Where(x => x.ProductoId == Convert.ToInt32(detalle.cadenaBusquedaProducto)).First();
        }
        catch (Exception)
        {
            await Alerta("top-end", "error", "Producto Inexistente");
        }

    }

    protected async Task buscarCliente()
    {
        try
        {
            venta.comprobante.personaJuridica = clientes.Where(x => x.PersonaJuridicaId == busquedaCliente).First();

        }
        catch (Exception)
        {

            await Alerta("top-end", "error", "Cliente Inexistente");
        }


    }


    protected void ChangePrecio(DetalleFactura detalle)
    {

        detalle.subtotal = (detalle.producto.precioUnitario * (detalle.producto.porcentajeRentabilidad / 100 + 1)) - detalle.bonificacion;
    }
    protected async Task CrearComprobante()
    {
        AccionSobreComprobante = "Crear";
        venta = new FacturaDto();

        valido = false;
        await HabilitarFormulario();

    }


    protected void FiltrarProducto(KeyboardEventArgs e)
    {
        Console.WriteLine(cadenafiltroBusqueda + ", " + criterioBusqueda);
        if (e.Key == "Enter")
        {
            if (cadenafiltroBusqueda != "" && cadenafiltroBusqueda != string.Empty)
            {
                try
                {
                    if (criterioBusqueda == "Codigo")
                    {
                        productosBuscados = productos.Where(x => x.ProductoId.ToString().ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }
                    else if (criterioBusqueda == "Nombre")
                    {
                        productosBuscados = productos.Where(x => x.nombre.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }

                    else if (criterioBusqueda == "Proveedor")
                    {
                        productosBuscados = productos.Where(x => x.proveedor.razonSocial.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                    }

                }
                catch (Exception ex)
                {

                    Console.WriteLine(ex.Message);
                }

            }
            else { productosBuscados = productos; }
        }
    }
    protected void FiltrarCliente(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (cadenafiltroBusqueda != "" && cadenafiltroBusqueda != string.Empty)
            {
                if (criterioBusqueda == "Razon Social")
                {
                    clientesBuscados = clientes.Where(x => x.razonSocial.ToLower().Contains(cadenafiltroBusqueda.ToLower())).ToList();
                }

                if (criterioBusqueda == "Codigo")
                {
                    clientesBuscados = clientes.Where(x => x.PersonaJuridicaId.ToString().Contains(cadenafiltroBusqueda)).ToList();
                }
            }
            else { clientesBuscados = clientes; }
        }
    }

    public async Task HabilitarFormulario()
    {
        await js.InvokeAsync<object>("EnabledFieldFormulario");
    }
    public async Task DeshabilitarFormulario()
    {
        await js.InvokeAsync<object>("DisabledFieldFormulario");
    }

    public async Task Alerta(string posicion = "top-end", string icono = "success", string mensaje = "Se creó el comprobante con éxito")
    {
        await js.InvokeAsync<object>("alerta", posicion, icono, mensaje);
    }

    public async Task ModalToggle()
    {
        await js.InvokeAsync<object>("ModalToggle");
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager uriHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient http { get; set; }
    }
}
#pragma warning restore 1591
