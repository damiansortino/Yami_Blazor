// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace LaymarClientSide.Client.Pages.Admin
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 4 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 5 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Client;

#line default
#line hidden
#line 7 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Client.Shared;

#line default
#line hidden
#line 8 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#line 9 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Client.Helpers;

#line default
#line hidden
#line 10 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using LaymarClientSide.Shared;

#line default
#line hidden
#line 11 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#line 12 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using OfficeOpenXml;

#line default
#line hidden
#line 13 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using OfficeOpenXml.Style;

#line default
#line hidden
#line 14 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\_Imports.razor"
using System.Drawing;

#line default
#line hidden
#line 4 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\Pages\Admin\UsersComponent.razor"
using LaymarClientSide.Client.Auth;

#line default
#line hidden
#line 6 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\Pages\Admin\UsersComponent.razor"
using LaymarClientSide.Shared.Entidades;

#line default
#line hidden
#line 5 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\Pages\Admin\UsersComponent.razor"
           [Authorize(Roles = "Admin")]

#line default
#line hidden
    [Microsoft.AspNetCore.Components.RouteAttribute("/users")]
    public partial class UsersComponent : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 235 "D:\GIT\AlmaLibre_Blazor\LaymarClientSide\Client\Pages\Admin\UsersComponent.razor"
       
    public string AcccionSobreUsuario { get; set; } = String.Empty;
    public List<UserInfo> users { get; set; } = new List<UserInfo>();
    public List<Roles> rolesseleccionados { get; set; } = new List<Roles>();
    public List<Roles> roles { get; set; } = new List<Roles>();
    public List<Sucursal> sucursales { get; set; } = new List<Sucursal>();
    public List<Sucursal> sucursalesSeleccionadas { get; set; } = new List<Sucursal>();

    private UserInfo userInfo = new UserInfo();
    protected async Task ListarUsuarios()
    {
        users = await http.GetJsonAsync<List<UserInfo>>("/api/Cuentas/Usuarios");

    }
    protected override async Task OnInitializedAsync()
    {
        await ListarUsuarios();
        roles = await http.GetJsonAsync<List<Roles>>("api/Cuentas/Roles");
        sucursales = await http.GetJsonAsync<List<Sucursal>>("api/Sucursal/Listar");
    }

    private async Task CrearUsuario()
    {

        Console.WriteLine(userInfo);
        var result = await http.PostJsonAsync<UserToken>("api/cuentas/crear", userInfo);
        await ListarUsuarios();
        AcccionSobreUsuario = "";
        await ModalToggle();
        await Alerta("top-end", "success", "Se creó el usuario correctamente");


    }

    public void AgregarRol(Roles rol)
    {

        if (userInfo.roles.Where(x => x.rol.Contains(rol.rol)).ToList().Count > 0)
        {
            userInfo.roles.Remove(userInfo.roles.Where(x => x.rol == rol.rol).First());
            Console.WriteLine($"se quito el rol {rol}");
            foreach (var r in userInfo.roles)
            {
                Console.WriteLine(r.rol);
            }
        }
        else
        {
            userInfo.roles.Add(rol);
            Console.WriteLine($"se agrego el rol {rol}");
            foreach (var r in userInfo.roles)
            {
                Console.WriteLine(r.rol);
            }
        }


    }


    public void AgregarSucursal(Sucursal sucursal, bool bandera)
    {

        if (bandera)
        {
            userInfo.sucursales.Remove(userInfo.sucursales.Where(x => x.SucursalId == sucursal.SucursalId).First());
            Console.WriteLine($"se quito la sucursal {sucursal.nombreSucursal}");
            foreach (Sucursal _sucursal in userInfo.sucursales)
            {
                Console.WriteLine(_sucursal.nombreSucursal);
            }
        }
        else
        {
            userInfo.sucursales.Add(sucursal);
            Console.WriteLine($"se agregó la sucursal {sucursal.nombreSucursal}");
            foreach (Sucursal _sucursal in userInfo.sucursales)
            {
                Console.WriteLine(_sucursal.nombreSucursal);
            }
        }

        this.StateHasChanged();
    }

    protected async Task EditarUsuario()
    {

        await http.PutJsonAsync<UserInfo>($"/api/Cuentas/Editar/{userInfo.id}", userInfo);
        await ListarUsuarios();
        AcccionSobreUsuario = "";
        await ModalToggle();
        await Alerta("top-end", "info", "Se editó el usuario correctamente");
    }

    protected async Task Login(UserInfo user)
    {

        var result = await http.PostJsonAsync<UserToken>("api/cuentas/login", user);
        await loginService.Login(result.Token);
        uriHelper.NavigateTo("");

    }
    protected async Task CambiarContraseña()
    {
        await http.PostJsonAsync("api/cuentas/CambiarContraseña", userInfo);
        await Alerta("top-end", "success", "Se cambio la contraseña del usuario correctamente");
        AcccionSobreUsuario = "";

    }
    protected async Task EliminarUsuario()
    {

        await http.DeleteAsync($"api/cuentas/EliminarUsuario/{userInfo.id}");
        await Alerta("top-end", "info", "Se elimino");
        await ListarUsuarios();
        await ModalConfirmToggle();

    }
    public async Task Alerta(string posicion = "top-end", string icono = "success", string mensaje = "Se creó el producto con éxito")
    {
        await js.InvokeAsync<object>("alerta", posicion, icono, mensaje);
    }

    public async Task ModalToggle()
    {
        await js.InvokeAsync<object>("ModalToggle");
    }
    public async Task ModalConfirmToggle()
    {
        await js.InvokeAsync<object>("ModalConfirmToggle");
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILoginService loginService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager uriHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient http { get; set; }
    }
}
#pragma warning restore 1591
